#include <stdio.h>
#include <vector>
#include <map>
using namespace std;

map<pair<int,int> , int> m;

bool composite[1000001] = { false };
vector<int> prime;
int cnt[100][80000] = { 0, };
int sz;

void get_prime() {
	for (int i = 2; i <= 1000000; i++) {
		if (composite[i]) continue;
		prime.push_back(i);
		for (int j = 2 * i; j <= 1000000; j = j + i)
			composite[j] = true;
	}
}
int main() {

	get_prime();
	sz = prime.size();
	
	int N, num;
	scanf("%d", &N);
	for (int i = 0; i < N; i++) {
		scanf("%d", &num);
		for (int j = 0; j < sz; j++) {
			while (num % prime[j] == 0) {
				m[{prime[j], j}]++;
				cnt[i][j]++;
				num /= prime[j];
			}
		}
	}

	int idx = 0, gcd = 1, ans = 0;
	for (auto x : m) {
		int n = x.second / N; 
		idx = x.first.second;
		int cal = n;
		while (cal--) 
			gcd *= x.first.first;
		
		for (int i = 0; i < N; i++) 
			ans += (n > cnt[i][idx]) ? n - cnt[i][idx] : 0;
	}
	
	printf("%d %d", gcd, ans); 
	return 0;
}
