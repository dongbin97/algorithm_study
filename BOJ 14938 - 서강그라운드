#include <stdio.h>
#include <queue>
using namespace std;
#define INF 100000000

typedef struct {
	int to, cost;
}st;

struct comp {
	bool operator()(st a, st b) {
		return a.cost > b.cost;
	}
};

int n, m, r, t[101], dist[101][101];
vector<st> graph[101];
priority_queue<st, vector<st>, comp> pq;

int main() {
	int a, b, l;
	scanf("%d %d %d", &n, &m, &r);
	for (int i = 1; i <= n; i++) scanf("%d", &t[i]);
	for (int i = 0; i < r; i++) {
		scanf("%d %d %d", &a, &b, &l);
		graph[a].push_back({ b,l });
		graph[b].push_back({ a,l });
	}

	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
			dist[i][j] = INF;

	for (int i = 1; i <= n; i++) {
		dist[i][i] = 0;
		pq.push({ i,dist[i][i] });

		while (!pq.empty()) {
			st e = pq.top(); pq.pop();

			for (st x : graph[e.to]) {
				if (dist[i][x.to] > x.cost + e.cost) {
					dist[i][x.to] = x.cost + e.cost;
					pq.push({ x.to, dist[i][x.to] });
				}
			}
		}
	}
		
	int ans = 0;
	for (int i = 1; i <= n; i++) {
		int sum = 0;
		for (int j = 1; j <= n; j++) {
			if (dist[i][j] <= m)
				sum += t[j];
		}
		if (ans < sum) ans = sum;
	}

	printf("%d", ans);
}
