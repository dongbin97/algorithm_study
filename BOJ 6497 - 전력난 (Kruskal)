#include <stdio.h>
#include <queue>
using namespace std;

typedef struct {
	int from, to, cost;
}edge;

struct comp {
	bool operator()(edge a, edge b) {
		return a.cost > b.cost;
	}
};

int  m, n, p[200001];
priority_queue<edge, vector<edge>, comp>  pq;

int find(int u) {
	int root, x, temp;
	for (root = u; p[root] >= 0; root = p[root]);
	for (x = u; x != root; x = temp) {
		temp = p[x];
		p[x] = root;
	}
	return root;
}

void merge(int u, int v) {
	int temp = p[u] + p[v];
	if (p[u] < p[v]) {
		p[v] = u;
		p[u] = temp;
	}
	else {
		p[u] = v;
		p[v] = temp;
	}
}

int main() {
	while (1) {
		scanf("%d %d", &m, &n);
		if (m == 0 && n == 0) break;

		int x, y, z;
		for (int i = 0; i < m; i++) p[i] = -1;

		int cost = 0;
		for (int i = 0; i < n; i++) {
			scanf("%d %d %d", &x, &y, &z);
			cost += z;
			pq.push({ x,y,z });
		}

		int cnt = 0;
		while (cnt < m - 1) {
			edge e = pq.top(); pq.pop();
			int u = find(e.from), v = find(e.to);

			if (u == v) continue;

			merge(u, v);
			cnt++;
			cost -= e.cost;
		}
		printf("%d\n", cost);
		
		while (!pq.empty()) 
			pq.pop();
	}
}
