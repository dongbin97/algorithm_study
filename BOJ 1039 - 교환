#include <stdio.h>
#include <queue>
using namespace std;

int N, K;
bool visited[1000001];
queue<int> q;

int get_len(int num) {
	int cnt = 0;
	while (num > 0) {
		cnt++;
		num /= 10;
	}
	return cnt;
}

int char_to_int(char buf[]) {
	int res = 0;
	for (int i = 0; buf[i]; i++) {
		res *= 10;
		res += (buf[i] - '0');
	}
	return res;

}
int exchange(int num, int i, int j) {
	char buf[10];
	sprintf(buf, "%d", num);
	if (i == 0 && buf[j] == '0') return -1;
	char temp = buf[i];
	buf[i] = buf[j];
	buf[j] = temp;
	return char_to_int(buf);
}

int main() {
	scanf("%d %d", &N, &K);
	int ans;
	if (N == 1000000) ans = 1000000;
	else if (N < 10) ans = -1;
	else if (N < 100 && N % 10 == 0) ans = -1;
	else {
		int digit = get_len(N);
		visited[N] = true;
		q.push(N);
		for (int i = 0; i < K; i++) {
			int size = q.size();
			for (int j = 0; j < size; j++) {
				int x = q.front(); q.pop();
				visited[x] = false;
				for (int k = 0; k < digit - 1; k++) {
					for (int l = k + 1; l < digit; l++) {
						int num = exchange(x, k, l);
						if (num < 0) continue;
						if (visited[num]) continue;
						else {
							visited[num] = true;
							q.push(num);
						}
					}
				}
			}
		}

		ans = -1;
		while (!q.empty()) {
			if (ans < q.front()) ans = q.front();
			q.pop();
		}
	}
	
	printf("%d", ans);
	return 0;
}
