#include <stdio.h>

int N, K, map[2][100][100];
int dx[] = { -1,1,0,0 }, dy[] = { 0,0,-1,1 };

void distribute(int rs, int re, int cs, int ce, int t) {
	for (int r = rs; r < re; r++) {
		for (int c = cs; c < ce; c++) {

			if (map[t][r][c] == 0) continue;

			for (int i = 0; i < 4; i++) {
				int nr = r + dx[i], nc = c + dy[i];
				if (nr < rs || nr >= re || nc < cs || nc >= ce) continue;
				if (map[t][nr][nc] == 0) continue;

				int d = map[t][r][c] - map[t][nr][nc];

				if (d > 0 && d / 5 > 0) {
					map[1-t][nr][nc] += d / 5;
					map[1-t][r][c] -= d / 5;
				}
			}
		}
	}

	for (int r = rs; r < re; r++) {
		for (int c = cs; c < ce; c++) {
			map[1-t][r][c] += map[t][r][c];
			map[t][r][c] = 0;
		}
	}
}

int main() {
	scanf("%d %d", &N, &K);
	for (int i = 0; i < N; i++)
		scanf("%d", &map[0][0][i]);

	int turn = 1, max, min = 20000;

	for (int i = 0; i < N; i++)
		if (min > map[0][0][i])
			min = map[0][0][i];

	while (1) {
		
		for (int i = 0; i < N; i++)
			if (map[0][0][i] == min)
				map[0][0][i]++;

		int h = 1, w = 1, e = 0, tmp;
		while (h <= N - (e + 1)) {
			for (int i = 0; i < h; i++) {
				for (int j = 0; j < w; j++) {
					map[0][1 + j][e + 1 + i] = map[0][i][e - j];
					map[0][i][e - j] = 0;
				}
			}

			tmp = w;
			w = h;
			h = 1 + tmp;
			e = e + w;
		}
		
		distribute(0, h, e - w + 1, N, 0);

		int idx = 0;
		for (int c = e - w + 1; c <= e; c++) {
			for (int r = 0; r < h; r++) {
				map[1][0][idx++] = map[1][r][c];
				map[1][r][c] = 0;
			}
		}

		for (int i = 0; i < N / 2;i++) {
			map[1][1][N / 2 + i] = map[1][0][N / 2 - 1 - i];
			map[1][0][N / 2 - 1 - i] = 0;
		}

		for (int i = 0; i < N / 4; i++) {
			map[1][2][N * 3 / 4 + i] = map[1][1][N * 3 / 4 - 1 - i];
			map[1][3][N * 3 / 4 + i] = map[1][0][N * 3 / 4 - 1 - i];
			map[1][1][N * 3 / 4 - 1 - i] = 0;
			map[1][0][N * 3 / 4 - 1 - i] = 0;
		}

		distribute(0, 4, N * 3 / 4, N, 1);

		idx = 0;
		for (int c = N * 3 / 4; c < N; c++) {
			for (int r = 0; r < 4; r++) {
				map[0][0][idx++] = map[0][r][c];
				map[0][r][c] = 0;
			}
		}

		max = 0; min = 20000;
		for (int i = 0; i < N; i++) {
			if (max < map[0][0][i]) max = map[0][0][i];
			if (min > map[0][0][i]) min = map[0][0][i];
		}

		if (max - min <= K) break;

		turn++;
	}

	printf("%d", turn);
}
