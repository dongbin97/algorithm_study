#include <stdio.h>
#include <queue>
using namespace std;
#define INF 1000000

typedef struct {
	int to, cost, time;
}st;


struct comp {
	bool operator()(st a, st b) {
		return a.time > b.time;
	}
};

int T, N, M, K, dp[101][10001];
vector<st> graph[101];
priority_queue<st, vector<st>, comp> pq;

int main() {
	int u, v, c, d;
	scanf("%d", &T);
	while (T--) {
		scanf("%d %d %d", &N, &M, &K);
		for (int i = 0; i < K; i++) {
			scanf("%d %d %d %d", &u, &v, &c, &d);
			graph[u].push_back({ v,c,d });
		}

		for (int i = 1; i <= N; i++)
			for (int j = 0; j <= M; j++)
				dp[i][j] = INF;

		dp[1][0] = 0;
		pq.push({ 1,0,0 });

		while (!pq.empty()) {
			st e = pq.top(); pq.pop();

			for (st x : graph[e.to]) {
				if (x.cost + e.cost <= M && x.time + e.time < dp[x.to][x.cost + e.cost]) {
					dp[x.to][x.cost + e.cost] = x.time + e.time;
					pq.push({ x.to,x.cost + e.cost,x.time + e.time });
				}
			}
		}

		int ans = INF;
		for (int i = 0; i <= M; i++) 
			if (ans > dp[N][i]) 
				ans = dp[N][i];
		

		if (ans == INF) printf("Poor KCM\n");
		else printf("%d\n", ans);

		for (int i = 1; i <= N; i++) graph[i].clear();
	}
}
