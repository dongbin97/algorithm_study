#include <stdio.h>
#include <queue>
using namespace std;
#define INF 100000000

typedef struct {
	int to, cost;
}st;

struct comp {
	bool operator()(st a, st b) {
		return a.cost > b.cost;
	}
};

int N, M, dist[1001], parent[1001];
vector<st> graph[1001], ans;
priority_queue<st, vector<st>, comp> pq;
bool used[1001];

int main() {
	int A, B, C;
	scanf("%d %d", &N, &M);
	for (int i = 0; i < M; i++) {
		scanf("%d %d %d", &A, &B, &C);
		graph[A].push_back({ B,C });
		graph[B].push_back({ A,C });
	}

	for (int i = 1; i <= N; i++) dist[i] = INF;

	dist[1] = 0;
	parent[1] = -1;
	pq.push({ 1,dist[1] });

	while (!pq.empty()) {
		st e = pq.top(); pq.pop();

		for (st x : graph[e.to]) {
			if (dist[x.to] > x.cost + e.cost) {
				dist[x.to] = x.cost + e.cost;
				parent[x.to] = e.to;
				pq.push({ x.to,dist[x.to] });
			}
		}
	}

	printf("%d\n", N - 1);
	for (int i = 2; i <= N; i++)
		printf("%d %d\n", i, parent[i]);
}
