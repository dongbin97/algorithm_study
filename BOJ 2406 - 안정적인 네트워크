#include <stdio.h>
#include <queue>
using namespace std;

typedef struct {
	int from, to, cost;
}edge;

struct comp {
	bool operator()(edge a, edge b) {
		return a.cost > b.cost;
	}
};

int n, m, c[1001][1001], p[1001];
bool connect[1001][1001];
vector<pair<int, int>> ans;
priority_queue<edge, vector<edge>, comp> pq;

int find(int u) {
	int root, x, temp;
	for (root = u; p[root] >= 0; root = p[root]);
	for (x = u; x != root; x = temp) {
		temp = p[x];
		p[x] = root;
	}
	return root;
}

void merge(int u, int v) {
	int temp = p[u] + p[v];
	if (p[u] < p[v]) {
		p[v] = u;
		p[u] = temp;
	}
	else {
		p[u] = v;
		p[v] = temp;
	}
}

int main() {
	int x, y;
	scanf("%d %d", &n, &m);
	for (int i = 0; i < m; i++) {
		scanf("%d %d", &x, &y);
		connect[x][y] = true;
		connect[y][x] = true;
	}

	for (int i = 1; i <= n; i++) p[i] = -1;

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			scanf("%d", &c[i][j]);
			if (i >= 2 && j >= 2 && i < j) {
				if (connect[i][j]) 
					pq.push({ i,j,0 });
				else
					pq.push({ i,j,c[i][j] });
			}
		}
	}
		
	int cnt = 0, cost = 0;
	while (cnt < n - 2) {
		edge e = pq.top(); pq.pop();
		int u = find(e.from), v = find(e.to);
		if (u == v) continue;
		merge(u, v);
		cnt++;
		cost += e.cost;

		if (!connect[e.from][e.to])
			ans.push_back({ e.from, e.to });
	}

	printf("%d %d\n", cost, ans.size());
	for (auto x : ans)
		printf("%d %d\n", x.first, x.second);
}
