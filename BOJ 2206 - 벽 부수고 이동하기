#include <stdio.h>
#include <vector>
#include <queue>
using namespace std;

typedef struct {
	int r, c;
}coor;

int N, M, map[1000][1000],v[2][1000][1000];
int dx[] = { -1,1,0,0 }, dy[] = { 0,0,-1,1 };
vector<coor> wall;
queue<coor> q;

int main() {
	scanf("%d %d", &N, &M);
	for (int i = 0; i < N; i++) 
		for (int j = 0; j < M; j++) 
			scanf("%1d", &map[i][j]);

	if (N == 1 && M == 1) {
		printf("1");
		return 0;
	}

	for (int r = 0; r < N; r++) {
		for (int c = 0; c < M; c++) {
			if (map[r][c] == 1) {
				int cnt = 0;
				for (int i = 0; i < 4; i++) {
					int nr = r + dx[i], nc = c + dy[i];
					if (nr < 0 || nr >= N || nc < 0 || nc >= M || map[nr][nc] == 1) continue;
					cnt++;
				}

				if (cnt > 1) wall.push_back({ r,c });
			}
		}
	}
	
	v[0][0][0] = 1;
	q.push({ 0,0 });
	while (!q.empty()) {
		coor x = q.front(); q.pop();
		
		for (int i = 0; i < 4; i++) {
			int nr = x.r + dx[i], nc = x.c + dy[i];
			if (nr < 0 || nr >= N || nc < 0 || nc >= M) continue;
			if (v[0][nr][nc] > 0 || map[nr][nc] == 1) continue;

			v[0][nr][nc] = v[0][x.r][x.c] + 1;
			q.push({ nr,nc });
		}
	}
	
	v[1][N - 1][M - 1] = 1;
	q.push({ N - 1,M - 1 });
	while (!q.empty()) {
		coor x = q.front(); q.pop();

		for (int i = 0; i < 4; i++) {
			int nr = x.r + dx[i], nc = x.c + dy[i];
			if (nr < 0 || nr >= N || nc < 0 || nc >= M) continue;
			if (v[1][nr][nc] > 0 || map[nr][nc] == 1) continue;

			v[1][nr][nc] = v[1][x.r][x.c] + 1;
			q.push({ nr,nc });
		}
	}

	int ans = N * M;
	if (v[0][N - 1][M - 1] > 0) ans = v[0][N - 1][M - 1];

	for (coor x : wall) {
		vector<int> temp;

		for (int i = 0; i < 4; i++) {
			int nr = x.r + dx[i], nc = x.c + dy[i];
			if (nr < 0 || nr >= N || nc < 0 || nc >= M || map[nr][nc] == 1) continue;
			
			temp.push_back(i);
		}

		int t_sz = temp.size();
		for (int i = 0; i < t_sz - 1; i++) {
			for (int j = i + 1; j < t_sz; j++) {
				int r1 = x.r + dx[temp[i]], c1 = x.c + dy[temp[i]];
				int r2 = x.r + dx[temp[j]], c2 = x.c + dy[temp[j]];

				if (v[0][r1][c1] != 0 && v[1][r2][c2] != 0) ans = min(ans, v[0][r1][c1] + v[1][r2][c2] + 1);
				if (v[1][r1][c1] != 0 && v[0][r2][c2] != 0) ans = min(ans, v[1][r1][c1] + v[0][r2][c2] + 1);
			}
		}
	}

	if (ans == N * M) ans = -1;
	printf("%d", ans);
}
