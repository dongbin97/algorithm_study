#include <stdio.h>
#include <queue>
#include <algorithm>
using namespace std;
#define INF 10000001

typedef struct {
	int to, cost;
}st;

struct comp {
	bool operator()(st a, st b) {
		return a.cost > b.cost;
	}
};

int N, E, v1, v2, dist[3][801];
vector<st> graph[801];
priority_queue<st, vector<st>, comp> pq;

int main() {
	int a, b, c;
	scanf("%d %d", &N, &E);
	for (int i = 0; i < E; i++) {
		scanf("%d %d %d", &a, &b, &c);
		graph[a].push_back({ b,c });
		graph[b].push_back({ a,c });
	}
	scanf("%d %d", &v1, &v2);

	for (int i = 0; i < 3; i++)
		for (int j = 1; j <= N; j++)
			dist[i][j] = INF;

	for (int i = 0; i < 3; i++) {
		int start;
		if (i == 0) start = 1;
		else if (i == 1) start = v1;
		else start = v2;

		dist[i][start] = 0;
		pq.push({ start,0 });

		while (!pq.empty()) {
			st e = pq.top(); pq.pop();

			for (st x : graph[e.to]) {
				if (dist[i][x.to] > x.cost + e.cost) {
					dist[i][x.to] = x.cost + e.cost;
					pq.push({ x.to,dist[i][x.to] });
				}
			}
		}
	}

	int ans = min(dist[0][v1] + dist[1][v2] + dist[2][N], dist[0][v2] + dist[2][v1] + dist[1][N]);
	
	if (ans >= INF) ans = -1;
	printf("%d", ans);
}
