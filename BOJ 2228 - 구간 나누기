#include <stdio.h>
#include <algorithm>
using namespace std;
#define MINF -1000000000
int N, M, arr[100], sum[100], dp[51][100][2];

int main() {
	scanf("%d %d", &N, &M);
	for (int i = 0; i < N; i++) {
		scanf("%d", &arr[i]);
		if (i == 0) sum[i] = arr[i];
		else if (i % 2 == 0)
			sum[i] = sum[i - 2] + arr[i];
	}

	for (int i = 0; i <= M; i++) {
		for (int j = 0; j < N; j++) {
			dp[i][j][0] = MINF;
			dp[i][j][1] = MINF;
		}
	}
	
	dp[1][0][0] = MINF;
	dp[1][0][1] = arr[0];
	for (int j = 1; j < N; j++) {
		dp[1][j][0] = max(dp[1][j - 1][0], dp[1][j - 1][1]);
		dp[1][j][1] = max(0, dp[1][j - 1][1]) + arr[j];
	}

	for (int i = 2; i <= M; i++) {
		for (int j = 0; j < N; j++) {
			if (j < 2 * i - 2) {
				dp[i][j][0] = MINF;
				dp[i][j][1] = MINF;
			}
			else if (j == 2 * i - 2) {
				dp[i][j][0] = MINF;
				dp[i][j][1] = sum[j];
			}
			else {
				dp[i][j][0] = max(dp[i][j - 1][0], dp[i][j - 1][1]);
				dp[i][j][1] = max(dp[i - 1][j - 1][0], dp[i][j - 1][1]) + arr[j];
			}
		}
	}

	printf("%d", max(dp[M][N - 1][0], dp[M][N - 1][1]));
}
