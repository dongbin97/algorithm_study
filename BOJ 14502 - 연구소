#include <stdio.h>
#include <vector>
#include <queue>
using namespace std;

typedef struct {
	int row, col;
}coor;

int N, M, map[8][8], temp[8][8], ans = 0;
int dx[] = { -1,1,0,0 }, dy[] = { 0,0,-1,1 };
vector<coor> zero, virus;

int func() {
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			temp[i][j] = map[i][j];

	queue<coor> q;
	for (coor x : virus) 
		q.push(x);
	
	while (!q.empty()) {
		coor x = q.front(); q.pop();

		for (int i = 0; i < 4; i++) {
			int nrow = x.row + dx[i], ncol = x.col + dy[i];
			if (nrow < 0 || nrow >= N || ncol < 0 || ncol >= M) continue;
			if (temp[nrow][ncol] > 0) continue;

			temp[nrow][ncol] = 2;
			q.push({ nrow,ncol });
		}
	}

	int cnt = 0;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			if (temp[i][j] == 0)
				cnt++;

	return cnt;
}

int main() {
	scanf("%d %d", &N, &M);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			scanf("%d", &map[i][j]);
			if (map[i][j] == 0) zero.push_back({ i,j });
			else if (map[i][j] == 2) virus.push_back({ i,j });
		}
	}

	int z_sz = zero.size();

	for (int i = 0; i < z_sz - 2; i++) {
		map[zero[i].row][zero[i].col] = 1;
		for (int j = i + 1; j < z_sz - 1; j++) {
			map[zero[j].row][zero[j].col] = 1;
			for (int k = j + 1; k < z_sz; k++) {
				map[zero[k].row][zero[k].col] = 1;

				int res = func();
				if (ans < res) 
					ans = res;

				map[zero[k].row][zero[k].col] = 0;
			}
			map[zero[j].row][zero[j].col] = 0;
		}
		map[zero[i].row][zero[i].col] = 0;
	}

	printf("%d", ans);
}
