#include <iostream>
#include <vector>
#include <queue>
#define SIZE 1000
using namespace std;

int check[SIZE][SIZE];
int N,M,num[SIZE][SIZE];
int dx[4] = { -1,0,1,0 }, dy[4] = {0,1,0,-1};

typedef struct {
	int x;
	int y;
	int c;
}cor;
queue<cor> q;
vector<pair<int, int>> start;
bool found = false;
void bfs() {

	for (int i = 0; i < start.size(); i++) {
		q.push({ start[i].first,start[i].second,0 });
	}
	int row, col,cnt,newrow,newcol;
	while (!q.empty()) {
		row = q.front().x, col = q.front().y, cnt = q.front().c;
		q.pop();
		for (int i = 0; i < 4; i++) {
			newrow = row + dx[i], newcol = col + dy[i];
			if (0 <= newrow && newrow < M && 0 <= newcol && newcol < N) {
				if (num[newrow][newcol]==0&&check[newrow][newcol] == 0) {
					check[newrow][newcol] = cnt+1;
					q.push({ newrow,newcol,cnt+1 });
				}
			}
		}
	}
}

int main(void)
{
	int i, j, count = 0;

		for (i = 0; i < SIZE; i++)
			for (j = 0; j < SIZE; j++)
				check[i][j] = 0;
		found = false;
		scanf("%d %d", &N,&M);
		for (i = 0; i < M; i++) {
			for (j = 0; j < N; j++) {
				scanf("%d", &num[i][j]);
				if (num[i][j] == 1) {
					start.push_back({ i,j });
					check[i][j] = -1;
				}
				else if(num[i][j]==-1)
					check[i][j] = -1;

			}
		}
		bfs();
		int max = 0;
		for (i = 0; i < M; i++) {
			for (j = 0; j < N; j++) {
				if (check[i][j] == 0) {
					printf("-1\n");
					return 0;
				}
				if (max < check[i][j])
					max = check[i][j];
			}
		}
		printf("%d\n", max);
	
	return 0;
}
