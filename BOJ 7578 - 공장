#include <stdio.h>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;
typedef pair<int, int> pii;

int N, order[500000];
pii arr1[500000], arr2[500000];
vector<int> tree;

int init(int node, int start, int end) {
	if (start == end) return tree[node] = 0;
	int mid = (start + end) / 2;
	return tree[node] = init(2 * node, start, mid) + init(2 * node + 1, mid + 1, end);
}

void update(int node, int start, int end, int idx) {
	tree[node] += 1;
	if (start == end) return;

	int mid = (start + end) / 2;
	if (idx <= mid) update(2 * node, start, mid, idx);
	else update(2 * node + 1, mid + 1, end, idx);
}

int query(int node, int start, int end, int left, int right) {
	if (right<start || left>end) return 0;
	else if (left <= start && end <= right) return tree[node];
	int mid = (start + end) / 2;
	return query(2 * node, start, mid, left, right) + query(2 * node + 1, mid + 1, end, left, right);
}

int main() {
	scanf("%d", &N);
	for (int i = 0; i < N; i++) {
		scanf("%d", &arr1[i].first);
		arr1[i].second = i;
	}

	for (int i = 0; i < N; i++) {
		scanf("%d", &arr2[i].first);
		arr2[i].second = i;
	}

	sort(arr1, arr1 + N);
	sort(arr2, arr2 + N);

	for (int i = 0; i < N; i++) 
		order[arr1[i].second] = arr2[i].second;

	int h = (int)ceil(log2(N));
	int t_size = 1 << (h + 1);
	tree.resize(t_size);

	init(1, 0, N - 1);
	long long ans = 0;
	for (int i = 0; i < N; i++) {
		int res = query(1, 0, N - 1, order[i] + 1, N - 1);
		ans = ans + res;
		update(1, 0, N - 1, order[i]);
	}

	printf("%lld", ans);
	return 0;
}
