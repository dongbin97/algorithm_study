#include <stdio.h>
#include <algorithm>
using namespace std;

int N;
int num[100000][3];
int max_dp[2][3], min_dp[2][3];

int main() {
	scanf("%d", &N);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < 3; j++) {
			scanf("%d", &num[i][j]);
		}
	}

	for (int i = 0; i < 3; i++) {
		max_dp[(N - 1) % 2][i] = num[N - 1][i];
		min_dp[(N - 1) % 2][i] = num[N - 1][i];
	}

	for (int i = N - 2; i >= 0; i--) {
		max_dp[i % 2][0] = num[i][0] + max(max_dp[(i + 1) % 2][0], max_dp[(i + 1) % 2][1]);
		max_dp[i % 2][1] = num[i][1] + max(max_dp[(i + 1) % 2][0], max(max_dp[(i + 1) % 2][1], max_dp[(i + 1) % 2][2]));
		max_dp[i % 2][2] = num[i][2] + max(max_dp[(i + 1) % 2][1], max_dp[(i + 1) % 2][2]);

		min_dp[i % 2][0] = num[i][0] + min(min_dp[(i + 1) % 2][0], min_dp[(i + 1) % 2][1]);
		min_dp[i % 2][1] = num[i][1] + min(min_dp[(i + 1) % 2][0], min(min_dp[(i + 1) % 2][1], min_dp[(i + 1) % 2][2]));
		min_dp[i % 2][2] = num[i][2] + min(min_dp[(i + 1) % 2][1], min_dp[(i + 1) % 2][2]);
	}
	
	int max_ans = max(max_dp[0][0], max(max_dp[0][1], max_dp[0][2]));
	int min_ans = min(min_dp[0][0], min(min_dp[0][1], min_dp[0][2]));

	printf("%d %d", max_ans, min_ans);
	return 0;
}
