#include <stdio.h>
#include <map>
#include <vector>
using namespace std;

map<int, int> m;
vector<int> graph[14];
int visit[14];

bool dfs(int u) {
	visit[u] = 1;

	for (int x : graph[u]) {
		if (visit[x] == 1) return false;

		if (!dfs(x)) return false;
	}
		
	return true;
}

int main() {
	int u, v, turn = 1;
	bool node = false;
	for (int i = 0; i < 14; i++) visit[i] = -1;

	while (1) {
		scanf("%d %d", &u, &v);

		if (u == -1 && v == -1) break;
		else if (u == 0 && v == 0) {
			bool isTree = true;
			int zero = 0, root;
			for (auto x : m) {
				if (x.second == 0) {
					zero++;
					root = x.first;
				}
				else if (x.second > 1) {
					isTree = false;
					break;
				}
			}
			if (zero != 1) isTree = false;

			if (isTree) {
				if (!dfs(root)) isTree = false;
				else {
					for (int i = 0; i < 14; i++) {
						if (visit[i] == 0) {
							isTree = false;
							break;
						}
					}
				}
			}

			if (!node || isTree) printf("Case %d is a tree.\n", turn);
			else printf("Case %d is not a tree.\n", turn);

			turn++;
			m.clear();
			for (int i = 0; i < 14; i++) {
				graph[i].clear();
				visit[i] = -1;
			}
			node = false;
		}
		else {
			node = true;
			if (m.find(u) == m.end()) m[u] = 0;
			m[v]++;
			visit[u] = 0; visit[v] = 0;
			graph[u].push_back(v);
		}
	}
}
