#include <stdio.h>
#include <vector>
using namespace std;

typedef struct {
	int row, col;
}coor;

typedef struct {
	int row, col, rain, size;
}st;

int N, M, map[20][20];
int dx[] = { -1,1,0,0 }, dy[] = { 0,0,-1,1 };
vector<coor> rainbow, v;
bool visited[20][20];

void init() {

	rainbow.clear();

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			visited[i][j] = false;
			if (map[i][j] == 0) rainbow.push_back({ i,j });
		}
	}


}

int dfs(int row, int col, int color) {
	int r = 0;
	visited[row][col] = true;
	v.push_back({ row,col });
	if (map[row][col] == 0) r++;

	for (int i = 0; i < 4; i++) {
		int nrow = row + dx[i], ncol = col + dy[i];
		if (nrow < 0 || nrow >= N || ncol < 0 || ncol >= N) continue;
		if ((map[nrow][ncol] == color || map[nrow][ncol] == 0) && !visited[nrow][ncol])
			r += dfs(nrow, ncol, color);
	}

	return r;
}

bool comp(st a, st b) {
	if (a.size == b.size) {
		if (a.rain == b.rain) {
			if (a.row == b.row) return a.col > b.col;
			else return a.row > b.row;
		}
		else return a.rain > b.rain;
	}
	else return a.size > b.size;
}

void gravity(){
	for (int j = 0; j < N; j++) {
		for (int i = N - 1; i >= 0; i--) {
			if (map[i][j] < 0) continue;
			int row = i;
			while (map[row+1][j] == -2 && row+1 < N) row++;
			
			int temp = map[i][j];
			map[i][j] = -2;
			map[row][j] = temp;
		}
	}
}

void spin() {
	int temp[21][21] = { 0, };

	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			temp[i][j] = map[i][j];

	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			map[i][j] = temp[j][N - 1 - i];
}

int main() {
	scanf("%d %d", &N, &M);

	for (int i = 0; i < N; i++) 
		for (int j = 0; j < N; j++) 
			scanf("%d", &map[i][j]);
		
		
	int ans = 0;
	while (1) {

		init();

		vector<coor> temp;
		st target = { N, N, -1, -1 };
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (map[i][j] > 0 && !visited[i][j]) {

					for (coor x : rainbow) visited[x.row][x.col] = false;
					v.clear();
					int rain = dfs(i, j, map[i][j]);
					int v_sz = v.size();

					if (v_sz >= 2 && !comp(target, { i,j,rain,v_sz })) {
						target = { i,j,rain,v_sz };
						temp = v;
					}

				}
			}
		}

		if (target.size<0) break;
		ans += target.size * target.size;

		for (coor x : temp) 
			map[x.row][x.col] = -2;

		gravity();
		spin();
		gravity();
	}

	printf("%d", ans);
}
