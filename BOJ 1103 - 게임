#include <stdio.h>

int dx[4] = { -1,1,0,0 }, dy[4] = { 0,0,-1,1 };
int map[50][50];
int dp[50][50] = { 0, }; //이 점에 오기까지 걸린 최대 횟수
int N, M, limit;
int ans = -1;

void DFS(int row, int col, int d) {
	if (ans < d) ans = d;
	if (ans > limit) return;
	if (!(0 <= row && row < N && 0 <= col && col < M)) return;
	if (map[row][col] == -1) return;
	if (d <= dp[row][col]) return;
	dp[row][col] = d;
	for (int i = 0; i < 4; i++) {
		int nrow = row + dx[i] * map[row][col];
		int ncol = col + dy[i] * map[row][col];
		
		DFS(nrow, ncol, d + 1);
	}
	return;
}


int main() {
	char c;
	scanf("%d %d", &N, &M);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			scanf("%c", &c);
			if (c == '\n') {
				j--;
				continue;
			}
			if (c == 'H') map[i][j] = -1;
			else map[i][j] = c - '0';
		}
	}
	limit = N * M;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			dp[i][j] = -1;

	DFS(0, 0, 0);
	if (ans > limit) ans = -1;
	printf("%d", ans);

	return 0;
}
