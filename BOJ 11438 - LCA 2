#include <stdio.h>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

int N, M, level[100001] = { 0, };
int parent[100001][20] = { 0, };
vector<int> graph[100001];
queue<int> q;

void BFS() {
	level[1] = 1;
	q.push(1);
	while (!q.empty()) {
		int u = q.front(); q.pop();
		for (auto x : graph[u]) {
			if (level[x] > 0) continue;
			level[x] = level[u] + 1;
			parent[x][0] = u;
			q.push(x);
		}
	}
}

int main() {
	int a, b;
	scanf("%d", &N);
	for (int i = 0; i < N - 1; i++) {
		scanf("%d %d", &a, &b);
		graph[a].push_back(b);
		graph[b].push_back(a);
	}

	BFS();

	
	for (int K = 1; K < 20; K++)
		for (int V = 2; V <= N; V++)
			parent[V][K] = parent[parent[V][K - 1]][K - 1];

	scanf("%d", &M);
	for (int i = 0; i < M; i++) {
		scanf("%d %d", &a, &b);
		
		if (level[a] > level[b]) swap(a, b);

		int diff = level[b] - level[a], t = 0;
		while (diff) {
			int x = diff & 1;
			if (x > 0) b = parent[b][t];
			diff /= 2;
			t++;
		}

		/*
		for (int K = 19; K >= 0; K--) {
			if (level[parent[b][K]] >= level[a])
				b = parent[b][K];
		}
		*/
	
		if (a == b) {
			printf("%d\n", a);
			continue;
		}

		for (int j = 19; j >= 0; j--) {
			if (parent[a][j] != parent[b][j]) {
				a = parent[a][j];
				b = parent[b][j];
			}
		}

		printf("%d\n", parent[a][0]);
	}
	return 0;
}
