#include <stdio.h>
#include <queue>
using namespace std;
#define INF 100000000

typedef struct {
	int from, to;
}edge;

typedef struct {
	int to, cost;
}st;

struct comp {
	bool operator()(st a, st b) {
		return a.cost > b.cost;
	}
};

int N, M, dist[1001][1001], temp[1001];
vector<st> graph[1001];
vector<edge> edges;
priority_queue<st, vector<st>, comp> pq;

int main() {
	int a, b, t;
	scanf("%d %d", &N, &M);
	for (int i = 0; i < M; i++) {
		scanf("%d %d %d", &a, &b, &t);
		graph[a].push_back({ b,t });
		graph[b].push_back({ a,t });
		edges.push_back({ a,b });
	}

	for (int i = 1; i <= N; i++)
		for (int j = 1; j <= N; j++)
			dist[i][j] = INF;

	for (int i = 1; i <= N; i++) {
		dist[i][i] = 0;
		pq.push({ i,dist[i][i] });

		while (!pq.empty()) {
			st e = pq.top(); pq.pop();

			for (st x : graph[e.to]) {
				if (dist[i][x.to] > x.cost + e.cost) {
					dist[i][x.to] = x.cost + e.cost;
					pq.push({ x.to, dist[i][x.to] });
				}
			}
		}
	}

	int ans = 0;

	for (edge e : edges) {
		if (dist[1][e.from] + dist[e.from][e.to] + dist[e.to][N] == dist[1][N] ||
			dist[1][e.to] + dist[e.to][e.from] + dist[e.from][N] == dist[1][N]) {

			for (int i = 1; i <= N; i++) temp[i] = INF;
			temp[1] = 0;
			pq.push({ 1,temp[1] });

			while (!pq.empty()) {
				st t = pq.top(); pq.pop();
		
				for (st x : graph[t.to]) {
					if ((t.to == e.from && x.to == e.to) || (t.to == e.to && x.to == e.from)) {
						
						continue;
					}
					if (temp[x.to] > x.cost + t.cost) {
						temp[x.to] = x.cost + t.cost;
						pq.push({ x.to, temp[x.to] });
					}
				}
			}
			if (temp[N] == INF) {
				ans = -1; 
				break;
			}
			else if (ans < temp[N] - dist[1][N])
				ans = temp[N] - dist[1][N];
		}
	}

	printf("%d", ans);
}
