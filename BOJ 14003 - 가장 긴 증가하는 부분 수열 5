#include <stdio.h>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;

typedef pair<int, int> pii;

bool comp(pii a, pii b) {
	if (a.first == b.first)
		return a.second > b.second;
	return a.first < b.first;
}

vector<int> tree;
pii arr[1000000];
int lis[1000000], p[1000000], ans[1000000];

int init(int node, int start, int end) {
	if (start == end) return tree[node] = 0;
	int mid = (start + end) / 2;
	return tree[node] = max(init(2 * node, start, mid), init(2 * node + 1, mid + 1, end));
}

void update(int node, int start, int end, int idx, int val) {
	tree[node] = max(tree[node], val);
	if (start == end) return;
	int mid = (start + end) / 2;
	if (idx <= mid) update(2 * node, start, mid, idx, val);
	else update(2 * node + 1, mid + 1, end, idx, val);
}

int query(int node, int start, int end, int left, int right) {
	if (left > end || right < start) return 0;
	else if (left <= start && end <= right) return tree[node];
	int mid = (start + end) / 2;
	return max(query(2 * node, start, mid, left, right), query(2 * node + 1, mid + 1, end, left, right));
}

int main() {

	int N, n;
	scanf("%d", &N);

	for (int i = 0; i < N; i++) {
		scanf("%d", &n);
		arr[i].first = n;
		arr[i].second = i;
		p[i] = n;
	}

	sort(arr, arr + N, comp);

	int h = (int)ceil(log2(N));
	int t_size = 1 << (h + 1);
	tree.resize(t_size);

	init(1, 0, N - 1);
	int res;
	for (int i = 0; i < N; i++) {
		res = query(1, 0, N - 1, 0, arr[i].second - 1); 
		lis[arr[i].second] = res + 1;
		update(1, 0, N - 1, arr[i].second, res + 1);
	}

	int a = tree[1], cnt = a, cur = 1000000001;
	printf("%d\n", a);

	int idx = N - 1;
	while (lis[idx] < a) idx--;

	ans[--cnt] = p[idx];
	cur = p[idx--];
	for (idx; idx >= 0 && cnt >= 0; idx--) {
		if (lis[idx] == cnt && p[idx] < cur) {
			ans[--cnt] = p[idx];
			cur = p[idx];
		}
	}

	for (int i = 0; i < a; i++)
		printf("%d ", ans[i]);
	printf("\n");
}
