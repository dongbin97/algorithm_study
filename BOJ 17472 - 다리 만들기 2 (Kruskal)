#include <stdio.h>
#include <vector>
#include <queue>
using namespace std;

typedef struct {
	int row, col;
} coor;

typedef struct {
	int from, to, cost;
} edge;

struct comp {
	bool operator()(edge a, edge b) {
		return a.cost > b.cost;
	}
};

int N, M, map[10][10],p[10];
int dx[4] = { -1,0,1,0 }, dy[4] = { 0,1,0,-1 };
bool v[10][10];
vector<coor> island;
priority_queue<edge, vector<edge>, comp> pq;

void dfs(int row, int col, int color) {
	v[row][col] = true;
	map[row][col] = color;

	for (int i = 0; i < 4; i++) {
		int nrow = row + dx[i], ncol = col + dy[i];
		if (nrow < 0 || nrow >= N || ncol < 0 || ncol >= M) continue;
		if (v[nrow][ncol] || map[nrow][ncol] == 0) continue;
		dfs(nrow, ncol, color);
	}
}

int find(int u) {
	int root, x, temp;
	for (root = u; p[root] >= 0; root = p[root]);
	for (x = u; x != root; x = temp) {
		temp = p[x];
		p[x] = root;
	}
	return root;
}

void merge(int u, int v) {
	int temp = p[u] + p[v];
	if (p[u] < p[v]) {
		p[v] = u;
		p[u] = temp;
	}
	else {
		p[u] = v;
		p[v] = temp;
	}
}

int main() {
	scanf("%d %d", &N, &M);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			scanf("%d", &map[i][j]);
			if (map[i][j] == 1) island.push_back({ i,j });
		}
	}

	int color = 1;
	for (coor x : island) {
		if (v[x.row][x.col]) continue;

		dfs(x.row, x.col, color++);
	}

	color--;
	for (int i = 0; i < color; i++) p[i] = -1;

	for (coor x : island) {
		for (int i = 0; i < 4; i++) {
			int nrow = x.row + dx[i], ncol = x.col + dy[i];
			if (nrow < 0 || nrow >= N || ncol < 0 || ncol >= M || map[nrow][ncol] > 0) continue;

			int cost = 1, found = -1;
			while (1) {
				int brow = nrow + cost * dx[i], bcol = ncol + cost * dy[i];
				if (brow < 0 || brow >= N || bcol < 0 || bcol >= M) break;
				if (map[brow][bcol] > 0) {
					found = map[brow][bcol];
					break;
				}
				else if (map[brow][bcol] == 0) cost++;
			}

			if (found > 0 && found != map[x.row][x.col] && cost >= 2)
				pq.push({ map[x.row][x.col],found,cost });
		}
	}

	int ans = 0, cnt = 0;
	while (cnt < color - 1 && !pq.empty()) {
		edge e = pq.top(); pq.pop();
		int u = find(e.from), v = find(e.to);

		if (u == v) continue;
		merge(u, v);
		cnt++;
		ans += e.cost;
	}

	if (cnt < color - 1) ans = -1;
	printf("%d", ans);
}
