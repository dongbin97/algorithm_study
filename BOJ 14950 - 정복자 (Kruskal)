#include <stdio.h>
#include <queue>
using namespace std;

typedef struct {
	int from, to, cost;
} edge;

struct comp {
	bool operator()(edge a, edge b) {
		return a.cost > b.cost;
	}
};

int N, M, t, p[10001];
priority_queue<edge, vector<edge>, comp> pq;

int find(int u) {
	int root, x, temp;
	for (root = u; p[root] >= 0; root = p[root]);
	for (x = u; x != root; x = temp) {
		temp = p[x];
		p[x] = root;
	}
	return root;
}

void merge(int u, int v) {
	int temp = p[u] + p[v];
	if (p[u] < p[v]) {
		p[v] = u;
		p[u] = temp;
	}
	else {
		p[u] = v;
		p[v] = temp;
	}
}

int main() {
	int A, B, C;
	scanf("%d %d %d", &N, &M, &t);

	for (int i = 0; i < N; i++) p[i] = -1;

	for (int i = 0; i < M; i++) {
		scanf("%d %d %d", &A, &B, &C);
		pq.push({ A,B,C });
	}

	int cnt = 0, cost = 0;
	while (cnt < N - 1) {
		edge e = pq.top(); pq.pop();
		int u = find(e.from), v = find(e.to);

		if (u == v) continue;
		merge(u, v);
		cost = cost + e.cost + t * cnt;
		cnt++;
	}

	printf("%d", cost);
}
