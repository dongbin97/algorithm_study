#include <stdio.h>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> tree;
int N;
pair<int,int> arr[500000];
vector<pair<int, int> > order;

int init(int node, int start, int end) {
	if (start == end) return tree[node] = 0;
	int mid = (start + end) / 2;
	return init(2 * node, start, mid) + init(2 * node + 1, mid + 1, end);
}

void update(int node, int start, int end, int idx) {
	tree[node] += 1;
	if (start == end) return;
	int mid = (start + end) / 2;
	if (idx <= mid) update(2 * node, start, mid, idx);
	else update(2 * node + 1, mid + 1, end, idx);
}

int sum(int node, int start, int end, int left, int right) {
	if (right<start || left>end) return 0;
	else if (left <= start && end <= right) return tree[node];
	int mid = (start + end) / 2;
	return sum(2 * node, start, mid, left, right) + sum(2 * node + 1, mid + 1, end, left, right);
}

int main() {
	scanf("%d", &N);
	for (int i = 0; i < N; i++) {
		scanf("%d", &arr[i].first);
		arr[i].second = i;
	}

	sort(arr, arr + N);

	for (int i = 0; i < N; i++) {
		order.push_back({ arr[i].second,i });
	}

	sort(order.begin(), order.end());

	int h = (int)ceil(log2(N));
	int t_size = 1 << (h + 1);
	tree.resize(t_size);
	init(1, 0, N - 1);

	for (int i = 0; i < N; i++) {
		printf("%d\n", sum(1, 0, N - 1, order[i].second + 1, N - 1) + 1);
		update(1, 0, N - 1, order[i].second);
	}

	return 0;
}
