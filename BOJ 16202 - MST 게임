#include <stdio.h>
#include <queue>
using namespace std;

typedef struct {
	int from, to, cost;
}edge;

struct comp {
	bool operator()(edge a, edge b) {
		return a.cost > b.cost;
	}
};

int N, M, K, p[1001];
priority_queue<edge, vector<edge>, comp> pq[2];

int find(int u) {
	int root, x, temp;
	for (root = u; p[root] >= 0; root = p[root]);
	for (x = u; x != root; x = temp) {
		temp = p[x];
		p[x] = root;
	}
	return root;
}

void merge(int u, int v) {
	int temp = p[u] + p[v];
	if (p[u] < p[v]) {
		p[v] = u;
		p[u] = temp;
	}
	else {
		p[u] = v;
		p[v] = temp;
	}
}

int main() {
	int x, y;
	scanf("%d %d %d", &N, &M, &K);
	for (int i = 1; i <= M; i++) {
		scanf("%d %d", &x, &y);
		pq[0].push({ x,y,i });
	}

	bool possible = true;
	for (int i = 0; i < K; i++) {
		if (!possible) {
			printf("0 ");
			continue;
		}

		int now = i % 2, next = (i + 1) % 2, cnt = 0, cost = 0;
		for (int j = 1; j <= N; j++) p[j] = -1;
		pq[next] = pq[now];
		while (cnt < N - 1 && !pq[now].empty()) {
			edge e = pq[now].top(); pq[now].pop();

			int u = find(e.from), v = find(e.to);
			if (u == v) continue;
			merge(u, v);
			cnt++;
			cost += e.cost;
		}

		if (cnt < N - 1) {
			cost = 0;
			possible = false;
		}

		printf("%d ", cost);
		pq[next].pop();
	}
}
