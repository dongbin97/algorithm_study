#include <stdio.h>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;
#define INF 1000000000

int N, M, num;
map<int, int> A_map, B_map;
vector<int> prime;
bool composite[32000];

void get_prime() {
	for (int i = 2; i < 32000; i++) {
		if (composite[i]) continue;
		prime.push_back(i);
		for (int j = 2 * i; j < 3200; j = j + i)
			composite[j] = true;
	}
}

int main() {

	get_prime();
	int sz = prime.size();

	scanf("%d", &N);
	for (int i = 0; i < N; i++) {
		scanf("%d", &num);
		for (int j = 0; j < sz; j++) {
			while (num % prime[j] == 0) {
				A_map[prime[j]]++;
				num /= prime[j];
			}
		}
		if (num > 1) A_map[num]++;
	}

	scanf("%d", &M);
	for (int i = 0; i < M; i++) {
		scanf("%d", &num);
		for (int j = 0; j < sz; j++) {
			while (num % prime[j] == 0) {
				B_map[prime[j]]++;
				num /= prime[j];
			}
		}
		if (num > 1) B_map[num]++;
	}

	map<int, int> ::iterator A_it = A_map.begin(), B_it = B_map.begin();
	long long ans = 1; 
	bool flag = false;
	while (A_it != A_map.end() && B_it != B_map.end()) {
		int A_prime = A_it->first, B_prime = B_it->first;
		if (A_prime < B_prime) A_it++;
		else if (A_prime > B_prime) B_it++;
		else {
			int x = min(A_it->second, B_it->second);
			while (x--) {
				ans = ans * A_prime;
				if (ans >= INF) {
					flag = true;
					ans %= INF;
				}
			}
			A_it++, B_it++;
		}
	}

	if (flag) {
		char buf[10];
		for (int i = 8; i >= 0; i--) {
			buf[i] = (ans % 10) + '0';
			ans /= 10;
		}
		buf[9] = '\0';
		printf("%s", buf);
	}
	else printf("%lld", ans);
}
