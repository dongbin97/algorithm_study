#include <stdio.h>
#include <vector>
#include <queue>
using namespace std;
#define SIZE 3001

int N;
vector<int> graph[SIZE];
bool visited[SIZE] = { false, };
int parent[SIZE];
int dist[SIZE];
queue<int> q;

int DFS(int u, int prev) {
	visited[u] = true;
	parent[u] = prev;
	int size = graph[u].size(), x, res;
	for (int i = 0; i < size; i++) {
		x = graph[u][i];
		if (x == prev) continue;
		else if (visited[x]) {
			parent[x] = u;
			return x;
		}
		res = DFS(x, u);
		if (res > 0) return res;
	}
	return -1;
}

void BFS() {
	while(!q.empty()){
		int u = q.front(); q.pop();
		int size = graph[u].size(), x;
		for (int i = 0; i < size; i++) {
			x = graph[u][i];
			if (visited[x]) continue;
			if (dist[x] == 0) continue;

			visited[x] = true;
			dist[x] = dist[u] + 1;
			q.push(x);
		}
	}
}

int main() {
	int a, b;
	scanf("%d", &N);

	for (int i = 0; i < N; i++) {
		scanf("%d %d", &a, &b);
		graph[a].push_back(b);
		graph[b].push_back(a);
	}

	int start = DFS(1, -1);

	for (int i = 1; i <= N; i++) {
		visited[i] = false;
		dist[i] = -1;
	}

	int k = start;  
	do {
		dist[k] = 0;
		if (graph[k].size() > 2) {
			visited[k] = true;
			q.push(k);
		}
		k = parent[k];
	} while (k != start);

	BFS();

	for (int i = 1; i <= N; i++)
		printf("%d ", dist[i]);
	return 0;
}
