#include <stdio.h>
#include <vector>
#include <cmath>
using namespace std;

vector<long long> tree;
long long arr[100001];

long long init(int node, int start, int end) {
	if (start == end) return tree[node] = arr[start];
	int mid = (start + end) / 2;
	return tree[node] = init(2 * node, start, mid) + init(2 * node + 1, mid + 1, end);
}

void update(int node, int start, int end, int index, long long diff) {
	tree[node] = tree[node] + diff;
	if (start == end) return;
	int mid = (start + end) / 2;
	if (index <= mid) update(2 * node, start, mid, index, diff);
	else update(2 * node + 1, mid + 1, end, index, diff);
}

long long sum(int node, int start, int end, int left, int right) {
	if (right < start || end < left) return 0;
	else if (left <= start && end <= right) return tree[node];
	int mid = (start + end) / 2;
	return sum(2 * node, start, mid, left, right) + sum(2 * node + 1, mid + 1, end, left, right);
}

int main() {
	int N, Q, x, y;
	long long a, b;
	scanf("%d %d", &N,&Q);

	for (int i = 1; i <= N; i++)
		scanf("%lld", &arr[i]);

	int h = (int)ceil(log2(N));
	int t_size = 1 << (h + 1);
	tree.resize(t_size);

	init(1, 1, N);
	for (int i = 0; i < Q; i++) {
		scanf("%d %d %lld %lld", &x, &y, &a, &b);
		if (x > y) {
			int temp = x;
			x = y;
			y = temp;
		}
		printf("%lld\n", sum(1, 1, N, x, y));
		update(1, 1, N, a, b - arr[a]);
		arr[a] = b;
	}

	return 0;
}
