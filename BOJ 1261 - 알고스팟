#include <stdio.h>
#include <deque>
#include <vector>
using namespace std;

int dx[4] = { 1,0, -1,0 }, dy[4] = { 0,-1,0,1 };
int map[100][100];
int visited[100][100];
int N, M;
deque<pair<int,int> > q;

int main() {
	scanf("%d %d", &M, &N);

	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			scanf("%1d", &map[i][j]);

	bool found = false;
	visited[0][0] = 1;
	q.push_front({ 0,0 });
	while (!q.empty() && !found) {
		int row = q.front().first;
		int col = q.front().second; q.pop_front();
		for (int i = 0; i < 4; i++) {
			int nrow = row + dx[i];
			int ncol = col + dy[i];

			if (nrow == N - 1 && ncol == M - 1) {
				visited[nrow][ncol] = visited[row][col];
				found = true;
				break;
			}

			if (0 <= nrow && nrow < N && 0 <= ncol && ncol < M) {
				if ((visited[nrow][ncol] == 0 || visited[nrow][ncol] > visited[row][col]) && map[nrow][ncol] == 0) {
					visited[nrow][ncol] = visited[row][col];
					q.push_front({ nrow,ncol });
				}

				if ((visited[nrow][ncol] == 0 || visited[nrow][ncol] > visited[row][col] + 1) && map[nrow][ncol] == 1) {
					visited[nrow][ncol] = visited[row][col] + 1;
					q.push_back({ nrow,ncol });
				}
			}
		}
	}

	printf("%d", visited[N - 1][M - 1] - 1);
	return 0;
}
