#include <stdio.h>
#include <queue>
using namespace std;
#define INF 10000000

typedef struct {
	int to, cost;
}st;

struct comp{
	bool operator()(st a, st b){
		return a.cost > b.cost;
	}
};

int T, N, M, K, room[101], dist[100][101];
vector<st> graph[101];
priority_queue<st, vector<st>, comp> pq;

int main() {
	int a, b, c;
	scanf("%d", &T);
	while (T--) {
		scanf("%d %d", &N, &M);
		for (int i = 0; i < M; i++) {
			scanf("%d %d %d", &a, &b, &c);
			graph[a].push_back({ b,c });
			graph[b].push_back({ a,c });
		}
		scanf("%d", &K);
		for (int i = 0; i < K; i++)
			scanf("%d", &room[i]);

		for (int i = 0; i < K; i++)
			for (int j = 1; j <= N; j++)
				dist[i][j] = INF;

		for (int i = 0; i < K; i++) {
			int start = room[i];
			dist[i][start] = 0;
			pq.push({ start,dist[i][start] });

			while (!pq.empty()) {
				st e = pq.top(); pq.pop();

				for (st x : graph[e.to]) {
					if (dist[i][x.to] > x.cost + e.cost) {
						dist[i][x.to] = x.cost + e.cost;
						pq.push({ x.to, dist[i][x.to] });
					}
				}
			}
		}

		int min = INF, ans;
		for (int i = 1; i <= N; i++) {
			int sum = 0;
			for (int j = 0; j < K; j++) 
				sum += dist[j][i];
			if (min > sum) {
				min = sum;
				ans = i;
			}
		}

		printf("%d\n", ans);

		for (int i = 1; i <= N; i++) graph[i].clear();
	}
}
