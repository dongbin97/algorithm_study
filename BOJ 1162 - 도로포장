#include <stdio.h>
#include <queue>
using namespace std;
#define INF 100000000000

typedef struct {
	int to, cnt;
	long long cost;
}st;

struct comp {
	bool operator()(st a, st b) {
		return a.cost > b.cost;
	}
};

int N, M, K;
long long dist[10001][21];
vector<st> graph[10001];
priority_queue<st, vector<st>, comp> pq;

int main() {
	int a, b;
	long long c;
	scanf("%d %d %d", &N, &M, &K);
	for (int i = 0; i < M; i++) {
		scanf("%d %d %lld", &a, &b, &c);
		graph[a].push_back({ b,0,c });
		graph[b].push_back({ a,0,c });
	}

	for (int i = 1; i <= N; i++)
		for (int j = 0; j <= K; j++)
			dist[i][j] = INF;

	for (int i = 0; i <= K; i++) dist[1][i] = 0;
	pq.push({ 1,0,0 });

	while(!pq.empty()) {
		st e = pq.top(); pq.pop();
		if (e.cost > dist[e.to][e.cnt]) continue;

		for (st x : graph[e.to]) {
			if (dist[x.to][e.cnt] > x.cost + e.cost) {
				dist[x.to][e.cnt] = x.cost + e.cost;
				pq.push({ x.to, e.cnt, dist[x.to][e.cnt] });
			}
			if (e.cnt + 1 <= K && dist[x.to][e.cnt + 1] > e.cost) {
				dist[x.to][e.cnt + 1] = e.cost;
				pq.push({ x.to,e.cnt + 1,dist[x.to][e.cnt + 1] });
			}
		}
	}

	long long ans = INF;
	for (int i = 0; i <= K; i++) {
		if (ans > dist[N][i])
			ans = dist[N][i];
	}
		
	printf("%lld", ans);
}
