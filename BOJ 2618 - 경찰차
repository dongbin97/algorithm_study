#include <stdio.h>
#include <algorithm>
using namespace std;
typedef pair<int, int> pii;

int N, W, dp[1001][1001];
pii arr[1001];

int dist(int src, int dest, int type) {
	int srow, scol, drow, dcol;
	if (src == 0) {
		if (type == 1) srow = 1, scol = 1;
		else srow = N, scol = N;
	}
	else srow = arr[src].first, scol = arr[src].second;

	drow = arr[dest].first, dcol = arr[dest].second;

	return abs(srow - drow) + abs(scol - dcol);
}

int solve(int p1, int p2, int idx) {
	if (dp[p1][p2] > 0) return dp[p1][p2];
	if (idx > W) return 0;

	int one = dist(p1, idx, 1) + solve(idx, p2, idx + 1);
	int two = dist(p2, idx, 2) + solve(p1, idx, idx + 1);

	return dp[p1][p2] = min(one, two);
}

void get_ans(int p1, int p2, int idx) {
	if (idx > W) return;

	int one = dist(p1, idx, 1) + solve(idx, p2, idx + 1);
	int two = dist(p2, idx, 2) + solve(p1, idx, idx + 1);

	if (one < two) {
		printf("1\n");
		get_ans(idx, p2, idx + 1);
	}
	else {
		printf("2\n");
		get_ans(p1, idx, idx + 1);
	}
}

int main() {
	scanf("%d", &N);
	scanf("%d", &W);
	for (int i = 1; i <= W; i++)
		scanf("%d %d", &arr[i].first, &arr[i].second);

	printf("%d\n", solve(0,0,1));
	get_ans(0, 0, 1);
	return 0;
}
