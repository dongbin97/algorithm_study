#include <stdio.h>
#include <queue>
using namespace std;

typedef struct {
	int l, r, c;
}st;

int L, R, C, v[30][30][30];
int dx[] = { -1,1,0,0,0,0 }, dy[] = { 0,0,-1,1,0,0 }, dz[] = { 0,0,0,0,-1,1 };
char map[30][30][31];
st s, e;
queue<st> q;

void init() {
	for (int i = 0; i < L; i++)
		for (int j = 0; j < R; j++)
			for (int k = 0; k < C; k++)
				v[i][j][k] = 0;

	while (!q.empty()) q.pop();
}

int main() {
	while (1) {
		scanf("%d %d %d", &L, &R, &C);
		if (L == 0 && R == 0 && C == 0) break;

		char temp;
		for (int i = 0; i < L; i++) {
			for (int j = 0; j < R; j++)
				scanf("%s", map[i][j]);
			scanf("%c", &temp);
		}

		for (int i = 0; i < L; i++) {
			for (int j = 0; j < R; j++) {
				for (int k = 0; k < C; k++) {
					if (map[i][j][k] == 'S') s = { i,j,k };
					else if (map[i][j][k] == 'E') e = { i,j,k };
				}
			}
		}

		init();

		v[s.l][s.r][s.c] = 1;
		q.push(s);

		while (!q.empty()) {
			st x = q.front(); q.pop();

			if (x.l == e.l && x.r == e.r && x.c == e.c) break;

			for (int i = 0; i < 6; i++) {
				int nl = x.l + dz[i], nr = x.r + dx[i], nc = x.c + dy[i];
				if (nl < 0 || nl >= L || nr < 0 || nr >= R || nc < 0 || nc >= C) continue;
				if (map[nl][nr][nc] == '#' || v[nl][nr][nc] > 0) continue;

				v[nl][nr][nc] = v[x.l][x.r][x.c] + 1;
				q.push({ nl,nr,nc });
			}
		}

		if (v[e.l][e.r][e.c] == 0) printf("Trapped!\n");
		else printf("Escaped in %d minute(s).\n", v[e.l][e.r][e.c] - 1);
	}
}
