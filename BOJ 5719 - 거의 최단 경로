#include <stdio.h>
#include <vector>
#include <queue>
using namespace std;
#define INF 10000000

typedef struct {
	int to, cost;
}st;

bool operator<(st a, st b) {
	return a.cost > b.cost;
}

int N, M, S, D, U, V, P;

int main() {
	while (1) {
		vector<st> graph[500], rev[500];
		priority_queue<st> pq;
		queue<int> q;
		int dist[500];
		bool check[500][500] = { false, }, used[500] = { false, };

		scanf("%d %d", &N, &M);
		if (N == 0 && M == 0) break;

		scanf("%d %d", &S, &D);

		for (int i = 0; i < M; i++) {
			scanf("%d %d %d", &U, &V, &P);
			graph[U].push_back({ V,P });
			rev[V].push_back({ U,P });
		}

		for (int i = 0; i < N; i++) dist[i] = INF;
		dist[S] = 0;
		pq.push({ S,0 });

		while (!pq.empty()) {
			st e = pq.top(); pq.pop();
			for (st x : graph[e.to]) {
				if (dist[x.to] > e.cost + x.cost) {
					dist[x.to] = e.cost + x.cost;
					pq.push({ x.to,dist[x.to] });
				}
			}
		}

		if (dist[D] == INF) {
			printf("-1\n");
			continue;
		}

		q.push(D);
		used[D] = true;

		while (!q.empty()) {
			int u = q.front(); q.pop();
			for (st x : rev[u]) {
				if (dist[x.to] + x.cost == dist[u]) {
					check[x.to][u] = true;
					if (used[x.to]) continue;
					used[x.to] = true;
					q.push(x.to);
				}
			}
		}

		for (int i = 0; i < N; i++) dist[i] = INF;
		dist[S] = 0;
		pq.push({ S,0 });

		while (!pq.empty()) {
			st e = pq.top(); pq.pop();
			for (st x : graph[e.to]) {
				if (check[e.to][x.to]) continue;
				if (dist[x.to] > e.cost + x.cost) {
					dist[x.to] = e.cost + x.cost;
					pq.push({ x.to,dist[x.to] });
				}
			}
		}

		if (dist[D] == INF) printf("-1\n");
		else printf("%d\n", dist[D]);
	}

	return 0;
}
