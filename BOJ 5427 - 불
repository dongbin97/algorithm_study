#include <stdio.h>
#include <queue>
using namespace std;

typedef struct {
	int r, c;
}coor;

int T, w, h, sr, sc, v[1000][1000];
int dx[] = { -1,1,0,0 }, dy[] = { 0,0,-1,1 };
char map[1000][1001];
vector<coor> fire;
queue<coor> fire_q, human_q;

void init() {
	for (int i = 0; i < h; i++)
		for (int j = 0; j < w; j++)
			v[i][j] = 0;

	fire.clear();
	while (!fire_q.empty()) fire_q.pop();
	while (!human_q.empty()) human_q.pop();
}

int bfs() {
	human_q.push({ sr,sc });
	v[sr][sc] = 1;

	while (!human_q.empty()) {
		int f_sz = fire_q.size();
		while (f_sz--) {
			coor x = fire_q.front(); fire_q.pop();

			for (int i = 0; i < 4; i++) {
				int nr = x.r + dx[i], nc = x.c + dy[i];
				if (nr < 0 || nr >= h || nc < 0 || nc >= w) continue;
				if (map[nr][nc] == '#' || map[nr][nc] == '*') continue;

				map[nr][nc] = '*';
				fire_q.push({ nr,nc });
			}
		}

		int h_sz = human_q.size();
		while (h_sz--) {
			coor x = human_q.front(); human_q.pop();

			if (x.r == 0 || x.r == h - 1 || x.c == 0 || x.c == w - 1)
				return v[x.r][x.c];

			for (int i = 0; i < 4; i++) {
				int nr = x.r + dx[i], nc = x.c + dy[i];
				if (nr < 0 || nr >= h || nc < 0 || nc >= w) continue;
				if (map[nr][nc] == '#' || map[nr][nc] == '*' || v[nr][nc] > 0) continue;

				v[nr][nc] = v[x.r][x.c] + 1;
				human_q.push({ nr, nc });
			}
		}
	}

	return -1;
}

int main() {
	scanf("%d", &T);
	while (T--) {

		scanf("%d %d", &w, &h);
		for (int i = 0; i < h; i++)
			scanf("%s", map[i]);

		init();

		for (int i = 0; i < h; i++) {
			for (int j = 0; j < w; j++) {
				if (map[i][j] == '*') fire_q.push({ i,j });
				else if (map[i][j] == '@') sr = i, sc = j;
			}
		}

		
		int res = bfs();
		if (res < 0) printf("IMPOSSIBLE\n");
		else printf("%d\n", res);
	}
}
