#include <stdio.h>
#include <queue>
using namespace std;
#define INF 100000000

typedef struct {
	int to, cost;
}st;

struct comp {
	bool operator()(st a, st b) {
		return a.cost > b.cost;
	}
};

int T, n, d, c, dist[10001];
vector<st> graph[10001];
priority_queue<st, vector<st>, comp> pq;

int main() {
	int a, b, s;
	scanf("%d", &T);
	while (T--) {
		scanf("%d %d %d", &n, &d, &c);
		for (int i = 0; i < d; i++) {
			scanf("%d %d %d", &a, &b, &s);
			graph[b].push_back({ a,s });
		}

		for (int i = 1; i <= n; i++) dist[i] = INF;

		dist[c] = 0;
		pq.push({ c,dist[c] });

		while (!pq.empty()) {
			st e = pq.top(); pq.pop();

			for (st x : graph[e.to]) {
				if (dist[x.to] > x.cost + e.cost) {
					dist[x.to] = x.cost + e.cost;
					pq.push({ x.to,dist[x.to] });
				}
			}
		}

		int cnt = 0, ans = 0;
		for (int i = 1; i <= n; i++) {
			if (dist[i] < INF) {
				cnt++;
				if (ans < dist[i]) ans = dist[i];
			}
		}

		printf("%d %d\n", cnt, ans);

		for (int i = 1; i <= n; i++) 
			graph[i].clear();
	}
}
