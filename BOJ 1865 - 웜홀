#include <stdio.h>
#include <queue>
using namespace std;
#define INF 3000000000

typedef struct {
	int to;
	long long cost;
}st;

int TC, N, M, W;
long long dist[501];
vector<st> graph[501];
bool v[501];

int main() {
	int S, E, T;
	scanf("%d", &TC);
	while (TC--) {
		scanf("%d %d %d", &N, &M, &W);
		for (int i = 0; i < M; i++) {
			scanf("%d %d %d", &S, &E, &T);
			graph[S].push_back({ E,T });
			graph[E].push_back({ S,T });
		}
		for (int i = 0; i < W; i++) {
			scanf("%d %d %d", &S, &E, &T);
			graph[S].push_back({ E,(-1) * T });
		}

		for (int i = 1; i <= N; i++) {
			dist[i] = INF;
			v[i] = false;
		}

		bool cycle = false;

		for (int k = 1; k <= N && !cycle; k++) {
			if (v[k]) continue;
			
			dist[k] = 0;
			v[k] = true;
			for (int i = 1; i <= N; i++) {
				for (int j = 1; j <= N; j++) {
					if (dist[j] == INF) continue;
					for (st x : graph[j]) {
						if (dist[x.to] > dist[j] + x.cost) {
							dist[x.to] = dist[j] + x.cost;
							v[x.to] = true;
							if (i == N) cycle = true;
						}
					}
				}
			}
		}
		
		if (cycle) printf("YES\n");
		else printf("NO\n");

		for (int i = 1; i <= N; i++) graph[i].clear();
	}
}
