#include <stdio.h>
#include <queue>
using namespace std;

typedef struct {
	int num, cnt;
}st;

int r, c, k, A[2][101][101];

struct comp {
	bool operator()(st a, st b) {
		if (a.cnt == b.cnt) return a.num > b.num;
		else return a.cnt > b.cnt;
	}
};

int main() {
	scanf("%d %d %d", &r, &c, &k);
	for (int i = 1; i <= 3; i++)
		for (int j = 1; j <= 3; j++)
			scanf("%d", &A[0][i][j]);

	if (A[0][r][c] == k) {
		printf("0");
		return 0;
	}

	int max_row = 3, max_col = 3;

	int turn = 1;
	while (turn <= 100) {
		for (int i = 1; i <= 100; i++)
			for (int j = 1; j <= 100; j++)
				A[turn % 2][i][j] = 0;


		if (max_row >= max_col) {
			int next_col = 0;
			for (int i = 1; i <= max_row; i++) {
				int used[101] = { 0, };
				for (int j = 1; j <= max_col; j++) {
					if (A[(turn + 1) % 2][i][j] != 0) 
						used[A[(turn + 1) % 2][i][j]]++;
				}

				priority_queue<st, vector<st>, comp> pq;
				for (int num = 1; num <= 100; num++) {
					if (used[num] > 0) 
						pq.push({ num, used[num] });
				}

				int idx = 1;
				while (!pq.empty() && idx <= 100) {
					A[turn % 2][i][idx] = pq.top().num;
					A[turn % 2][i][idx + 1] = pq.top().cnt;
					
					pq.pop();
					idx += 2;
				}

				if (next_col < idx - 1) next_col = idx - 1;
			}
			max_col = next_col;
		}
		else {
			int next_row = 0;
			for (int j = 1; j <= max_col; j++) {
				int used[101] = { 0, };
				for (int i = 1; i <= max_row; i++) {
					if (A[(turn + 1) % 2][i][j] != 0) 
						used[A[(turn + 1) % 2][i][j]]++;
				}

				priority_queue<st, vector<st>, comp> pq;
				for (int num = 1; num <= 100; num++) {
					if (used[num] > 0) 
						pq.push({ num, used[num] });
				}

				int idx = 1;
				while (!pq.empty() && idx <= 100) {
					A[turn % 2][idx][j] = pq.top().num;
					A[turn % 2][idx + 1][j] = pq.top().cnt;
					
					pq.pop();
					idx += 2;
				}

				if (next_row < idx - 1) next_row = idx - 1;
			}
			max_row = next_row;
		}

		if (A[turn % 2][r][c] == k) break;
		turn++;
	}

	if (turn > 100) turn = -1;
	printf("%d", turn);
}
