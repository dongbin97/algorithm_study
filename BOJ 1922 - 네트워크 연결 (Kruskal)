#include <stdio.h>
#include <vector>
#include <queue>
using namespace std;

typedef struct {
	int from, to, cost;
}edge;

struct comp {
	bool operator()(edge a, edge b) {
		return a.cost > b.cost;
	}
};

vector<edge> edges;
priority_queue<edge, vector<edge>, comp> pq;
int p[1001];

int find(int a) {
	int root, temp, x;
	for (root = a; p[root] >= 0; root = p[root]);
	for (x = a; x != root; x = temp) {
		temp = p[x];
		p[x] = root;
	}
	return root;
}
void merge(int u, int v) {
	int temp = p[u] + p[v];
	if (p[u] < p[v]) {
		p[v] = u;
		p[u] = temp;
	}
	else {
		p[u] = v;
		p[v] = temp;
	}
}

int main() {
	int N, M, from, to, cost;
	scanf("%d", &N);
	scanf("%d", &M);
	for (int i = 0; i < M; i++) {
		scanf("%d %d %d", &from, &to, &cost);
		if (from == to) continue;
		pq.push({ from,to,cost });
	}

	for (int i = 1; i <= N; i++) p[i] = -1;
	int ans = 0, cnt = 0;
	while (cnt < N - 1) {
		edge e = pq.top(); pq.pop();
		int u = find(e.from);
		int v = find(e.to);
		if (u == v) continue;
		merge(u, v);
		cnt++;
		ans += e.cost;
	}

	printf("%d", ans);
	return 0;
}
