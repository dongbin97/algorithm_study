#include <stdio.h>
#include <vector>
#include <algorithm>
using namespace std;

typedef struct {
	int from, to, cost;
}e;

bool comp(e a, e b) {
	return b.cost > a.cost;
}

vector<e> edge;
int parent[1001];

int find(int u) {
	int root, x, temp;
	for (root = u; parent[root] >= 0; root = parent[root]);
	for (x = u; x != root; x = temp) {
		temp = parent[x];
		parent[x] = root;
	}
	return root;
}

void merge(int u, int v) {
	if (parent[u] < parent[v]) {
		parent[u] += parent[v];
		parent[v] = u;
	}
	else {
		parent[v] += parent[u];
		parent[u] = v;
	}
}

int main() {
	int N, M, a, b, c;
	scanf("%d %d", &N, &M);
	for (int i = 0; i < M; i++) {
		scanf("%d %d %d", &a, &b, &c);
		edge.push_back({ a,b,c });
	}

	sort(edge.begin(), edge.end(), comp);

	for (int i = 1; i <= N; i++)
		parent[i] = -1;

	int cnt = 0, ans = 0, idx = 0;
	while (cnt < N - 1) {
		a = edge[idx].from;
		b = edge[idx].to;
		c = edge[idx].cost;

		int u = find(a);
		int v = find(b);
		if (u != v) {
			merge(u, v);
			cnt++;
			ans += c;
		}
		idx++;
	}
	printf("%d", ans);
	return 0;
}
