#include <stdio.h>
#include <cmath>
#include <vector>
#include <algorithm>
using namespace std;

typedef pair<int, int> pii;

vector<long long> tree;
vector<pii> edge;
int N, M;

bool comp(pii a, pii b) {
	if (a.first == b.first)
		return a.second < b.second;
	else return a.first < b.first;
}

long long init(int node, int start, int end) {
	if (start == end) return tree[node] = 0;
	int mid = (start + end) / 2;
	return tree[node] = init(2 * node, start, mid) + init(2 * node + 1, mid + 1, end);
}

void update(int node, int start, int end, int idx) {
	tree[node] += 1;
	if (start == end) return;

	int mid = (start + end) / 2;
	if (idx <= mid) update(2 * node, start, mid, idx);
	else update(2 * node + 1, mid + 1, end, idx);
}

long long query(int node, int start, int end, int left, int right) {
	if (left > end || right < start) return 0;
	else if (left <= start && end <= right) return tree[node];
	int mid = (start + end) / 2;
	return query(2 * node, start, mid, left, right) + query(2 * node + 1, mid + 1, end, left, right);
}

int main() {
	int a, b;
	scanf("%d %d", &N, &M);
	
	int h = (int)ceil(log2(N));
	int t_size = 1 << (h + 1);
	tree.resize(t_size);

	init(1, 0, N-1);
	for (int i = 0; i < M; i++) {
		scanf("%d %d", &a, &b);
		edge.push_back({ a,b });
	}
	
	sort(edge.begin(), edge.end(), comp);
	
	long long ans = 0;
	for (int i = 0; i < M; i++) {
		b = edge[i].second;
		ans += query(1, 0, N - 1, b, N - 1);
		update(1, 0, N - 1, b - 1);
	}

	printf("%lld", ans);
	return 0;
}
