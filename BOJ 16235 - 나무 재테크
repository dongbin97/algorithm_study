#include <stdio.h>
#include <queue>
using namespace std;

int N, M, K, A[10][10], map[10][10];
int dx[] = { -1,-1,0,1,1,1,0,-1 }, dy[] = { 0,1,1,1,0,-1,-1,-1 };
priority_queue<int, vector<int>, greater<>> tree[10][10];
queue<int> temp[10][10];

void spring_and_summer() {
	for (int r = 0; r < N; r++) {
		for (int c = 0; c < N; c++) {
			int after = 0;
			while (!tree[r][c].empty()) {
				if (map[r][c] >= tree[r][c].top()) {
					map[r][c] -= tree[r][c].top();
					temp[r][c].push(tree[r][c].top() + 1);
				}
				else 
					after += (tree[r][c].top() / 2);

				tree[r][c].pop();
			}

			map[r][c] += after;
		}
	}
}

void autumn_and_winter() {
	for (int r = 0; r < N; r++) {
		for (int c = 0; c < N; c++) {

			map[r][c] += A[r][c];

			int cnt = 0;
			while (!temp[r][c].empty()) {
				if (temp[r][c].front() % 5 == 0) cnt++;
				tree[r][c].push(temp[r][c].front());
				temp[r][c].pop();
			}

			if (cnt == 0) continue;

			for (int i = 0; i < 8; i++) {
				int nr = r + dx[i], nc = c + dy[i];
				if (nr < 0 || nr >= N || nc < 0 || nc >= N) continue;
				for (int j = 0; j < cnt; j++)
					tree[nr][nc].push(1);
			}

		}
	}
}

int main() {
	scanf("%d %d %d", &N, &M, &K);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			scanf("%d", &A[i][j]);
			map[i][j] = 5;
		}
	}
		
	int x, y, z;
	for (int i = 0; i < M; i++) {
		scanf("%d %d %d", &x, &y, &z);
		tree[x - 1][y - 1].push(z);
	}

	int cnt = M;
	while(K--){
		spring_and_summer();
		autumn_and_winter();
	}

	int ans = 0;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			ans += tree[i][j].size();

	printf("%d", ans);
}
