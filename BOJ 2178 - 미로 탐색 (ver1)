#include <stdio.h>
#include <vector>
#include <queue>
using namespace std;
#define SIZE 10000

vector<int> graph[SIZE];
queue<int>	q;
int visited[SIZE] = { 0, };
int maze[100][100];
int N, M;

void BFS() {
	visited[0] = 1;
	q.push(0);
	while (!q.empty()) {
		int u = q.front(); q.pop();
		int size = graph[u].size(), x;
		for (int i = 0; i < size; i++) {
			x = graph[u][i];
			if (visited[x] > 0) continue;

			visited[x] = visited[u] + 1;
			if (x == N * M - 1) {
				return;
			}

			q.push(x);
		}
	}
	
}
int main() {
	int a, b;
	scanf("%d %d", &N, &M);

	for (int i = 0; i < N; i++) 
		for (int j = 0; j < M; j++)
			scanf("%1d", &maze[i][j]);
	
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (maze[i][j] != 1) continue;
			a = i * M + j;
			if (i + 1 < N && maze[i + 1][j] == 1) {
				b = (i + 1) * M + j;
				graph[a].push_back(b);
				graph[b].push_back(a);
			}
			if (j + 1 < M && maze[i][j + 1] == 1) {
				b = i * M + j + 1;
				graph[a].push_back(b);
				graph[b].push_back(a);
			}
		}
	}
	
	BFS();
	printf("%d", visited[N * M - 1]);

	return 0;
}
