#include <iostream>
#include <vector>
#include <algorithm>
#define SIZE 10001
using namespace std;

vector<pair<int,int>> a[SIZE];
bool check[SIZE];


pair<int,int> dfs(int v) {  //return first: max radius, second: max length
	check[v] = true;
	vector<int> l;
	int ans = 0;
	for (int i = 0; i < a[v].size(); i++) {
		int next = a[v][i].first;
		int cost = a[v][i].second;
		if (check[next] == false) {
			pair<int, int> p = dfs(next);
			if (p.first > ans)
				ans = p.first;
			l.push_back(p.second + cost);
		}
	}
	int height = 0;
	sort(l.begin(), l.end());
	reverse(l.begin(), l.end());
	if (l.size() >= 1) {
		height = l[0];
		if (ans < height)
			ans = height;
	}
	if (l.size() >= 2) {
		if (ans < l[0] + l[1]) {
			ans = l[0] + l[1];
		}
	}
	return { ans,height };
}
int main() {
	int N;
	scanf("%d", &N);
	int node1,node2,i;
	int d;
	for (i = 0; i < N-1; i++) {
		scanf("%d %d %d", &node1, &node2, &d);
		a[node1].push_back({ node2,d });
		a[node2].push_back({ node1,d });
	}
	
	printf("%d\n", dfs(1).first);
	return 0;
}
