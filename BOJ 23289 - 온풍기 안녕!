#include <stdio.h>
#include <vector>
#include <queue>
using namespace std;

typedef struct {
	int row, col;
}coor;

typedef struct {
	int row, col, dir;
}st;

vector<st> heater;
vector<coor> target;
int R, C, K, W, temp[20][20], map[2][20][20];
int dx[] = { 0,0,-1,1 }, dy[] = { 1,-1,0,0 };
bool wall[20][20][2];

int wc[4][5][3] = { {{0,0,0},{-1,0,1},{0,0,1},{1,0,0},{1,0,1}},
					{{0,0,0},{-1,-1,1},{0,-1,1},{1,0,0},{1,-1,1}},
					{{0,-1,0},{0,-1,1},{0,0,0},{0,0,1},{0,1,0}},
					{{0,0,1},{1,1,0},{1,0,0},{0,-1,1},{1,-1,0}} };

int m[4][2][2] = { {{1,0},{0,1}}, {{1,0},{0,-1}}, {{0,-1},{1,0}}, {{0,1},{-1,0}} };

void distribute(st s) {
	int v[20][20] = { 0, };
	queue<coor> q;

	int nr = s.row + dx[s.dir], nc = s.col + dy[s.dir];

	q.push({ nr, nc });
	v[nr][nc] = 5;

	while (!q.empty()) {
		coor x = q.front(); q.pop();
		temp[x.row][x.col] += v[x.row][x.col];
		if (v[x.row][x.col] == 1) continue;

		nr = x.row - m[s.dir][0][0] + m[s.dir][0][1], nc = x.col - m[s.dir][1][0] + m[s.dir][1][1];

		if (0 <= nr && nr < R && 0 <= nc && nc < C && !wall[x.row + wc[s.dir][0][0]][x.col + wc[s.dir][0][1]][wc[s.dir][0][2]] && !wall[x.row + wc[s.dir][1][0]][x.col + wc[s.dir][1][1]][wc[s.dir][1][2]]) {
			if (v[nr][nc] == 0) {
				v[nr][nc] = v[x.row][x.col] - 1;
				q.push({ nr,nc });
			}
		}

		nr = x.row + dx[s.dir], nc = x.col + dy[s.dir];
		if (0 <= nr && nr < R && 0 <= nc && nc < C && !wall[x.row + wc[s.dir][2][0]][x.col + wc[s.dir][2][1]][wc[s.dir][2][2]]) {
			if (v[nr][nc] == 0) {
				v[nr][nc] = v[x.row][x.col] - 1;
				q.push({ nr,nc });
			}
		}

		nr = x.row + m[s.dir][0][0] + m[s.dir][0][1], nc = x.col + m[s.dir][1][0] + m[s.dir][1][1];
		if (0 <= nr && nr < R && 0 <= nc && nc < C && !wall[x.row + wc[s.dir][3][0]][x.col + wc[s.dir][3][1]][wc[s.dir][3][2]] && !wall[x.row + wc[s.dir][4][0]][x.col + wc[s.dir][4][1]][wc[s.dir][4][2]]) {
			if (v[nr][nc] == 0) {
				v[nr][nc] = v[x.row][x.col] - 1;
				q.push({ nr,nc });
			}
		}
	}
}

int main() {
	scanf("%d %d %d", &R, &C, &K);
	for (int i = 0; i < R; i++) {
		for (int j = 0; j < C; j++) {
			scanf("%d", &temp[i][j]);
			if (0 < temp[i][j] && temp[i][j] < 5)
				heater.push_back({ i,j,temp[i][j] - 1 });
			else if (temp[i][j] == 5)
				target.push_back({ i,j });

			temp[i][j] = 0;
		}
	}

	scanf("%d", &W);
	int r, c, p;
	for (int i = 0; i < W; i++) {
		scanf("%d %d %d", &r, &c, &p);
		wall[r - 1][c - 1][p] = true;
	}

	for (st x : heater)
		distribute(x);

	int turn;
	bool found;
	for (turn = 1; turn <= 100; turn++) {

		for (int r = 0; r < R; r++)
			for (int c = 0; c < C; c++)
				map[(turn - 1) % 2][r][c] += temp[r][c];

		for (int r = 0; r < R; r++) {
			for (int c = 0; c < C; c++) {
				for (int i = 0; i < 4; i++) {
					int nr = r + dx[i], nc = c + dy[i];
					if (nr < 0 || nr >= R || nc < 0 || nc >= C) continue;
					if (wall[r + wc[i][2][0]][c + wc[i][2][1]][wc[i][2][2]]) continue;
					if (map[(turn - 1) % 2][r][c] > map[(turn - 1) % 2][nr][nc]) {
						int diff = map[(turn - 1) % 2][r][c] - map[(turn - 1) % 2][nr][nc];
						map[turn % 2][r][c] -= diff / 4;
						map[turn % 2][nr][nc] += diff / 4;
					}
				}
			}
		}

		for (int r = 0; r < R; r++) {
			for (int c = 0; c < C; c++) {
				map[turn % 2][r][c] += map[(turn - 1) % 2][r][c];
				map[(turn - 1) % 2][r][c] = 0;
				if ((r == 0 || r == R - 1 || c == 0 || c == C - 1) && map[turn % 2][r][c] > 0)
					map[turn % 2][r][c]--;
			}
		}

		found = false;
		for (coor x : target) {
			if (map[turn % 2][x.row][x.col] < K) {
				found = true;
				break;
			}
		}

		if (!found) break;
	}

	printf("%d", turn);
}
