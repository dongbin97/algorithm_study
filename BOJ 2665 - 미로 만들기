#include <stdio.h>
#include <queue>
using namespace std;
#define INF 1000000

typedef struct {
	int to_row, to_col, cost;
}st;

struct comp {
	bool operator()(st a, st b) {
		return a.cost > b.cost;
	}
};

int n, map[50][50], dist[50][50];
int dx[] = { -1,1,0,0 }, dy[] = { 0,0,-1,1 };
vector<st> graph[50][50];
priority_queue<st, vector<st>, comp> pq;

int main() {
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			scanf("%1d", &map[i][j]);

	for (int row = 0; row < n; row++) {
		for (int col = 0; col < n; col++) {
			for (int i = 0; i < 4; i++) {
				int nrow = row + dx[i], ncol = col + dy[i];
				if (nrow < 0 || nrow >= n || ncol < 0 || ncol >= n) continue;
				if (map[nrow][ncol] == 1) graph[row][col].push_back({ nrow,ncol,0 });
				else graph[row][col].push_back({ nrow,ncol,1 });
			}
		}
	}

	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			dist[i][j] = INF;

	dist[0][0] = 0;
	pq.push({ 0,0,dist[0][0] });

	while (!pq.empty()) {
		st e = pq.top(); pq.pop();

		for (st x : graph[e.to_row][e.to_col]) {
			if (dist[x.to_row][x.to_col] > x.cost + e.cost) {
				dist[x.to_row][x.to_col] = x.cost + e.cost;
				pq.push({ x.to_row,x.to_col,dist[x.to_row][x.to_col] });
			}
		}
	}

	printf("%d", dist[n - 1][n - 1]);
}
