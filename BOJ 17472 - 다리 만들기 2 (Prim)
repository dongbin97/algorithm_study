#include <stdio.h>
#include <queue>
using namespace std;

typedef struct {
	int row, col;
}coor;

typedef struct {
	int to, cost;
} st;

struct comp {
	bool operator()(st a, st b) {
		return a.cost > b.cost;
	}
};

int N, M, map[10][10];
int dx[] = { -1,1,0,0 }, dy[] = { 0,0,-1,1 };
vector<coor> island;
vector<st> graph[7];
priority_queue<st, vector<st>, comp> pq;
bool v[10][10], used[7];

void dfs(int row, int col, int color) {
	v[row][col] = true;
	map[row][col] = color;

	for (int i = 0; i < 4; i++) {
		int nrow = row + dx[i], ncol = col + dy[i];
		if (nrow < 0 || nrow >= N || ncol < 0 || ncol >= M) continue;
		if (v[nrow][ncol] || map[nrow][ncol] == 0) continue;
		dfs(nrow, ncol, color);
	}
}

int main() {
	scanf("%d %d", &N, &M);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			scanf("%d", &map[i][j]);
			if (map[i][j] == 1)
				island.push_back({ i, j });
		}
	}

	int color = 1;
	for (coor x : island) {
		if (v[x.row][x.col]) continue;
		dfs(x.row, x.col, color++);
	}
	color--;

	for (coor x : island) {
		for (int i = 0; i < 4; i++) {
			int nrow = x.row + dx[i], ncol = x.col + dy[i];
			if (nrow < 0 || nrow >= N || ncol < 0 || ncol >= M || map[nrow][ncol] > 0) continue;

			int cost = 1, found = -1;
			while (1) {
				int brow = nrow + cost * dx[i], bcol = ncol + cost * dy[i];
				if (brow < 0 || brow >= N || bcol < 0 || bcol >= M) break;
				if (map[brow][bcol] > 0) {
					found = map[brow][bcol];
					break;
				}
				else if (map[brow][bcol] == 0) cost++;
			}

			if (found > 0 && found != map[x.row][x.col] && cost >= 2) {
				graph[map[x.row][x.col]].push_back({ found ,cost });
				graph[found].push_back({ map[x.row][x.col],cost });
			}
		}
	}

	used[1] = true;
	for (st x : graph[1]) pq.push(x);

	int cnt = 0, cost = 0;
	while (cnt < color - 1 && !pq.empty()) {
		st e = pq.top(); pq.pop();
		if (used[e.to]) continue;
		used[e.to] = true;
		cnt++;
		cost += e.cost;

		for (st x : graph[e.to]) {
			if (used[x.to]) continue;
			pq.push(x);
		}
	}

	if (cnt < color - 1) cost = -1;
	printf("%d", cost);
}
