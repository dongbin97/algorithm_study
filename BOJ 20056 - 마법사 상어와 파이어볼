#include <stdio.h>
#include <queue>
using namespace std;

typedef struct {
	int m, s, d;
}st;

int N, M, K, r, c, m, s, d;
int dx[] = { -1,-1,0,1,1,1,0,-1 }, dy[] = { 0,1,1,1,0,-1,-1,-1 };
queue<st> map[50][50];

int main() {
	scanf("%d %d %d", &N, &M, &K);
	for (int i = 0; i < M; i++) {
		scanf("%d %d %d %d %d", &r, &c, &m, &s, &d);
		map[r - 1][c - 1].push({ m,s,d });
	}

	int turn = 1;
	while (turn <= K) {

		queue<st> temp[50][50];

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				while (!map[i][j].empty()) {
					st x = map[i][j].front();
					map[i][j].pop();

					int nr = (i + N + dx[x.d] * (x.s % N)) % N, nc = (j + N + dy[x.d] * (x.s % N)) % N;
					temp[nr][nc].push({ x.m,x.s,x.d });
				}
			}
		}

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				int cnt;
				if ((cnt = temp[i][j].size()) < 2) {
					while (!temp[i][j].empty()) {
						map[i][j].push(temp[i][j].front());
						temp[i][j].pop();
					}
					continue;
				}

				int m_sum = 0, s_sum = 0, odd = 0, even = 0;
				while (!temp[i][j].empty()) {
					st x = temp[i][j].front();
					temp[i][j].pop();

					m_sum += x.m;
					s_sum += x.s;

					if (x.d % 2 == 1) odd++;
					else even++;
				}

				int dir = (odd == 0 || even == 0) ? 0 : 1;

				if (m_sum / 5 > 0) {
					for (int k = 0; k < 4; k++) {
						map[i][j].push({ m_sum / 5,s_sum / cnt,2 * k + dir });
					}
				}
			}
		}

		turn++;
	}

	int ans = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			while (!map[i][j].empty()) {
				ans += map[i][j].front().m;
				map[i][j].pop();
			}
		}
	}

	printf("%d", ans);
}
