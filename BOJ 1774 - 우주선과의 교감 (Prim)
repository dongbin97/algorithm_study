#include <stdio.h>
#include <queue>
#include <math.h>
using namespace std;

typedef struct {
	long long x, y;
}coor;

typedef struct {
	int to;
	double cost;
} st;

struct comp {
	bool operator()(st a, st b) {
		return a.cost > b.cost;
	}
};

int N, M;
vector<coor> s;
vector<st> graph[1001];
priority_queue<st, vector<st>, comp> pq;
bool already[10001][1001], used[1001];

int main() {
	int X, Y;
	scanf("%d %d", &N, &M);
	for (int i = 0; i < N; i++) {
		scanf("%d %d", &X, &Y);
		s.push_back({ X,Y });
	}

	for (int i = 0; i < M; i++) {
		scanf("%d %d", &X, &Y);
		already[X][Y] = true;
		already[Y][X] = true;
	}

	for (int i = 0; i < N - 1; i++) {
		for (int j = i + 1; j < N; j++) {
			double cost;
			if (already[i + 1][j + 1]) cost = 0;
			else cost = sqrt(pow(s[i].x - s[j].x, 2) + pow(s[i].y - s[j].y, 2));
			graph[i + 1].push_back({ j + 1,cost });
			graph[j + 1].push_back({ i + 1,cost });
		}
	}

	used[1] = true;
	for (st x : graph[1]) pq.push(x);

	int cnt = 0;
	double cost = 0;
	while (cnt < N - 1) {
		st e = pq.top(); pq.pop();
		if (used[e.to]) continue;
		used[e.to] = true;
		cnt++;
		cost += e.cost;

		for (st x : graph[e.to]) {
			if (used[x.to]) continue;
			pq.push(x);
		}
	}

	printf("%.02f", cost);
}
