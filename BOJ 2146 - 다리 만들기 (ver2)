#include <stdio.h>
#include <queue>
using namespace std;

int dx[4] = { -1,0,1,0 }, dy[4] = { 0,1,0,-1 };
queue<pair<int, int> > q;
int map[100][100];
int visited[100][100] = { 0, };
int N;

void DFS(int row, int col, int color) {
	map[row][col] = color;
	for (int i = 0; i < 4; i++) {
		int nrow = row + dx[i];
		int ncol = col + dy[i];
		if (0 <= nrow && nrow < N && 0 <= ncol && ncol < N && map[nrow][ncol] == 1) {
			DFS(nrow, ncol, color);
		}
	}
}

void BFS() {
	while (!q.empty()) {
		int row = q.front().first;
		int col = q.front().second; q.pop();

		for (int i = 0; i < 4; i++) {
			int nrow = row + dx[i];
			int ncol = col + dy[i];
			if (0 <= nrow && nrow < N && 0 <= ncol && ncol < N) {
				if (visited[nrow][ncol] >= 0) continue;
				
				visited[nrow][ncol] = visited[row][col] + 1;
				map[nrow][ncol] = map[row][col];
				q.push({ nrow,ncol });
			}
		}
	}
}

int main() {
	scanf("%d", &N);

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			scanf("%d", &map[i][j]);
			if (map[i][j] == 1) q.push({ i,j });
		}
	}
		
	int color = 2;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (map[i][j] == 1)
				DFS(i, j, color++);
		}
	}

	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			if (map[i][j] == 0) visited[i][j] = -1;

	BFS();
	
	int min = 10000;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (j + 1 < N && map[i][j] != map[i][j + 1])
				if (min > visited[i][j] + visited[i][j + 1])
					min = visited[i][j] + visited[i][j + 1];

			if (i + 1 < N && map[i][j] != map[i + 1][j])
				if (min > visited[i][j] + visited[i + 1][j])
					min = visited[i][j] + visited[i + 1][j];
		}
	}
	
	printf("%d", min);
	return 0;
}
