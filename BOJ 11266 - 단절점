#include <stdio.h>
#include <vector>
#include <algorithm>
using namespace std;

int V, E, dfn[10001], low[10001], num, cnt = 0;
vector<int> graph[10001];
bool ap[100001] = { false, };

void dfnlow(int u, int prev) {
	dfn[u] = low[u] = num++;
	int child = 0;
	for (int x : graph[u]) {
		if (dfn[x] < 0) {
			child++;
			dfnlow(x, u);
			low[u] = min(low[u], low[x]);
			if (dfn[u] <= low[x])
				ap[u] = true;
		}
		else if (x != prev)
			low[u] = min(low[u], dfn[x]);
	}

	if (prev == -1 && child < 2) ap[u] = false;
	if (ap[u]) cnt++;
}

int main() {
	int a, b;

	scanf("%d %d", &V, &E);
	for (int i = 0; i < E; i++) {
		scanf("%d %d", &a, &b);
		graph[a].push_back(b);
		graph[b].push_back(a);
	}

	for (int i = 1; i <= V; i++)
		dfn[i] = low[i] = -1;
	num = 1;

	for (int i = 1; i <= V; i++) {
		if (dfn[i] > 0) continue;
		dfnlow(i, -1);
	}

	printf("%d\n", cnt);
	for (int i = 1; i <= V; i++)
		if (ap[i]) 
			printf("%d ", i);

	return 0;
}
