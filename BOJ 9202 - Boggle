#include <stdio.h>
#include <string.h>
#include <string>
#include <map>
#include <queue>
using namespace std;

struct TRIE {
	bool finish;
	TRIE* node[26];

	TRIE() {
		finish = false;
		for (int i = 0; i < 26; i++) node[i] = NULL;
	}

	void insert(char* str) {
		if (*str == NULL) {
			finish = true;
			return;
		}

		int cur = *str - 'A';
		if (node[cur] == NULL) node[cur] = new TRIE();
		node[cur]->insert(str + 1);
	}

	bool possible(char* str) {
		if (*str == NULL) {
			for (int i = 0; i < 26; i++)
				if (node[i] != NULL)
					return true;
			return false;
		}

		int cur = *str - 'A';
		if (node[cur] == NULL) return false;
		return node[cur]->possible(str + 1);
	}

	bool exist(char* str) {
		if (*str == NULL) {
			if (finish == true) return true;
			else return false;
		}

		int cur = *str - 'A';
		if (node[cur] == NULL) return false;
		return node[cur]->exist(str + 1);
	}
};

int dx[] = { -1,-1,0,1,1,1,0,-1 }, dy[] = { 0,1,1,1,0,-1,-1,-1 };
int s[9] = { 0,0,0,1,1,2,3,5,11 };
int w, b, cnt, score, maxlen;
bool vt[4][4];
char str[300000][9], ans[9], board[4][5];
string max_str;
map<string, int> m;
TRIE* trie;

void DFS(int row, int col, int idx) {
	if (idx > 8) return;
	vt[row][col] = true;
	ans[idx] = board[row][col];
	ans[idx + 1] = '\0';
	if (trie->exist(ans)) {
		string s(ans);
		m[s]++;
	}
	if (trie->possible(ans)) {
		for (int i = 0; i < 8; i++) {
			int nrow = row + dx[i];
			int ncol = col + dy[i];
			if (!(0 <= nrow && nrow < 4 && 0 <= ncol && ncol < 4)) continue;
			if (vt[nrow][ncol]) continue;
			DFS(nrow, ncol, idx + 1);
		}
	}
	vt[row][col] = false;
}

int main() {
	trie = new TRIE();

	scanf("%d", &w);
	for (int i = 0; i < w; i++) {
		scanf("%s", str[i]);
		trie->insert(str[i]);
	}

	scanf("%d", &b);
	while (b--) {
		for (int i = 0; i < 4; i++) 
			scanf("%s", board[i]);

		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				DFS(i, j, 0);
			}
		}
		
		cnt = 0, score = 0, maxlen = 0;
		for (auto x : m) {
			int len = x.first.length();
			if (maxlen < len) {
				maxlen = len;
				max_str = x.first;
			}
			score += s[len];
			cnt++;
		}
		printf("%d %s %d\n", score, max_str.c_str(), cnt);
		m.clear();
	}

	return 0;
}
