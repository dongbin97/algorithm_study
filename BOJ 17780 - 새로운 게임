#include <stdio.h>
#include <deque>
using namespace std;

typedef struct {
	int row, col, dir;
}st;

int N, K, r, c, d, color[12][12];
int dx[] = { 0,0,-1,1 }, dy[] = { 1,-1,0,0 };
st pos[10];
deque<int> map[12][12];


int main() {
	scanf("%d %d", &N, &K);
	for (int i = 0; i < N; i++) 
		for (int j = 0; j < N; j++) 
			scanf("%d", &color[i][j]);
		
	for (int i = 0; i < K; i++) {
		scanf("%d %d %d", &r, &c, &d);
		pos[i] = { r - 1,c - 1,d - 1 };
		map[r - 1][c - 1].push_back(i);
	}

	int turn = 1;
	bool finish = false;
	while (turn <= 1000) {
		for (int i = 0; i < K; i++) {
			int row = pos[i].row, col = pos[i].col;
			if (map[row][col].front() == i) {
				int nr = row + dx[pos[i].dir], nc = col + dy[pos[i].dir];
				if (nr < 0 || nr >= N || nc < 0 || nc >= N || color[nr][nc] == 2) {
					pos[i].dir = (pos[i].dir % 2 == 0) ? pos[i].dir + 1 : pos[i].dir - 1;
					nr = row + dx[pos[i].dir], nc = col + dy[pos[i].dir];

					if (nr < 0 || nr >= N || nc < 0 || nc >= N || color[nr][nc] == 2)
						nr = row, nc = row;
					else if (color[nr][nc] == 1) {
						while (!map[row][col].empty()) {
							int x = map[row][col].back();  map[row][col].pop_back();
							pos[x].row = nr, pos[x].col = nc;
							map[nr][nc].push_back(x);
						}
					}
					else {
						while (!map[row][col].empty()) {
							int x = map[row][col].front();  map[row][col].pop_front();
							pos[x].row = nr, pos[x].col = nc;
							map[nr][nc].push_back(x);
						}
					}
				}
				else if (color[nr][nc] == 1) {
					while (!map[row][col].empty()) {
						int x = map[row][col].back();  map[row][col].pop_back();
						pos[x].row = nr, pos[x].col = nc;
						map[nr][nc].push_back(x);
					}
				}
				else {
					while (!map[row][col].empty()) {
						int x = map[row][col].front();  map[row][col].pop_front();
						pos[x].row = nr, pos[x].col = nc;
						map[nr][nc].push_back(x);
					}
				}

				if (map[nr][nc].size() >= 4) {
					finish = true;
					break;
				}
			}
		}
		if (finish) break;
		turn++;
	}

	if (turn > 1000) turn = -1;
	printf("%d", turn);
}
