#include <stdio.h>
#include <queue>
using namespace std;

typedef struct {
	int r, c;
}coor;

int R, C;
int dx[] = { -1,1,0,0 }, dy[] = { 0,0,-1,1 };
char map[1000][1001];
queue<coor> fire, human;
int v[1000][1000];

int bfs() {
	while (!human.empty()) {
		int f_sz = fire.size();
		for (int f = 0; f < f_sz; f++) {
			coor x = fire.front(); fire.pop();

			for (int i = 0; i < 4; i++) {
				int nr = x.r + dx[i], nc = x.c + dy[i];
				if (nr < 0 || nr >= R || nc < 0 || nr >= C) continue;

				if (map[nr][nc] == '.') {
					map[nr][nc] = 'F';
					fire.push({ nr,nc });
				}
			}
		}

		int h_sz = human.size();
		for (int h = 0; h < h_sz; h++) {
			coor x = human.front(); human.pop();
			if (x.r == 0 || x.r == R - 1 || x.c == 0 || x.c == C - 1)
				return v[x.r][x.c];

			for (int i = 0; i < 4; i++) {
				int nr = x.r + dx[i], nc = x.c + dy[i];
				if (nr < 0 || nr >= R || nc < 0 || nr >= C) continue;

				if (map[nr][nc] == '.' && v[nr][nc] == 0) {
					v[nr][nc] = v[x.r][x.c] + 1;
					human.push({ nr,nc });
				}
			}
		}
	}

	return -1;
}

int main() {
	scanf("%d %d", &R, &C);

	for (int i = 0; i < R; i++)
		scanf("%s", map[i]);

	for (int i = 0; i < R; i++) {
		for (int j = 0; j < C; j++) {
			if (map[i][j] == 'F')
				fire.push({ i,j });
			else if (map[i][j] == 'J') {
				v[i][j] = 1;
				map[i][j] = '.';
				human.push({ i,j });
			}
		}
	}

	int res = bfs();
	if (res < 0) printf("IMPOSSIBLE");
	else printf("%d", res);
}
