#include <stdio.h>
#define INF 10000000

typedef struct {
	int to_row, to_col, time;
}st;

int map[30][30] = { 0, },dist[30][30];
st hole[30][30];
int dx[] = { -1,1,0,0 }, dy[] = { 0,0,-1,1 };
int W, H, G, E, T;

int main() {	
	int X1, Y1, X2, Y2;
	while (1) {
		scanf("%d %d", &W, &H);
		if (W == 0 && H == 0) break;

		scanf("%d", &G);
		for (int i = 0; i < G; i++) {
			scanf("%d %d", &X1, &Y1);
			map[Y1][X1] = -1;
		}

		scanf("%d", &E);
		for (int i = 0; i < E; i++) {
			scanf("%d %d %d %d %d", &X1, &Y1, &X2, &Y2, &T);
			map[Y1][X1] = 1;
			hole[Y1][X1] = { Y2,X2,T };
		}
			
		for (int i = 0; i < H; i++)
			for (int j = 0; j < W; j++)
				dist[i][j] = INF;

		bool cycle = false, found = false;
	

		dist[0][0] = 0;
		for (int cnt = 0; cnt < H * W  ; cnt++) {
			for (int row = 0; row < H ; row++) {
				for (int col = 0; col < W ; col++) {
					if (dist[row][col] == INF) continue;
					if (row == H - 1 && col == W - 1) continue;
					if (map[row][col] == 1) {
						st x = hole[row][col];
						if (dist[x.to_row][x.to_col] > dist[row][col] + x.time) {
							dist[x.to_row][x.to_col] = dist[row][col] + x.time;
							if(cnt == H * W - 1) cycle = true;
						}
						continue;
					}
					for (int i = 0; i < 4; i++) {
						int nrow = row + dx[i];
						int ncol = col + dy[i];
						if (0 <= nrow && nrow < H && 0 <= ncol && ncol < W) {
							if (map[nrow][ncol] == -1) continue;
							else if (dist[nrow][ncol] > dist[row][col] + 1) {
								dist[nrow][ncol] = dist[row][col] + 1;
								if (cnt == H * W - 1) cycle = true;
							}
						}
					}
				}
			}
		}

		if (cycle) printf("Never\n");
		else if (dist[H - 1][W - 1] == INF)
			printf("Impossible\n");
		else printf("%d\n", dist[H - 1][W - 1]);

		for (int i = 0; i < H; i++) {
			for (int j = 0; j < W; j++) {
				map[i][j] = 0;
				hole[i][j] = { 0,0,0 };
			}
		}
	}
	return 0;
}
