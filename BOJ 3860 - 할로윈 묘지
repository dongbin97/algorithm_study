#include <stdio.h>
#define INF 400000000
int dx[] = { 0,0,1,-1 }, dy[] = { 1,-1,0,0 };

typedef struct {
	int row, col, cost;
}st;

int W, H, G, E, X1, Y1, X2, Y2, T;
int map[30][30], time[30][30];
st hole[30][30];

int main() {
	while (1) {
		scanf("%d %d", &W, &H);
		if (W == 0 && H == 0) break;

		for (int i = 0; i < H; i++) {
			for (int j = 0; j < W; j++) {
				map[i][j] = 0;
				time[i][j] = INF;
			}
		}
	
		scanf("%d", &G);
		for (int i = 0; i < G; i++) {
			scanf("%d %d", &X1, &Y1);
			map[Y1][X1] = -1;
		}
		scanf("%d", &E);
		for (int i = 0; i < E; i++) {
			scanf("%d %d %d %d %d", &X1, &Y1, &X2, &Y2, &T);
			map[Y1][X1] = 1;
			hole[Y1][X1] = { Y2,X2,T };
		}

		bool cycle = false;
		time[0][0] = 0;
		for (int cnt = 0; cnt < H*W; cnt++) {
			for (int row = 0; row < H; row++) {
				for (int col = 0; col < W; col++) {
					if (time[row][col] == INF) continue;
					if (row == H - 1 && col == W - 1) continue;
	
					int nrow, ncol;
					if (map[row][col] == 1) {
						nrow = hole[row][col].row;
						ncol = hole[row][col].col;
						if (time[nrow][ncol] > time[row][col] + hole[row][col].cost) {
							time[nrow][ncol] = time[row][col] + hole[row][col].cost;
							if (cnt == W * H - 1) cycle = true;
						}
						continue;
					}
					for (int j = 0; j < 4; j++) {
						nrow = row + dx[j];
						ncol = col + dy[j];
						if (!(0 <= nrow && nrow < H && 0 <= ncol && ncol < W)) continue;
						if (map[nrow][ncol] == -1) continue;

						if (time[nrow][ncol] > time[row][col] + 1) {
							time[nrow][ncol] = time[row][col] + 1;
							if (cnt == W * H - 1) cycle = true;
						}
					}
				}
			}
		}

		if (cycle) printf("Never\n");
		else if (time[H - 1][W - 1] == INF) printf("Impossible\n");
		else printf("%d\n", time[H - 1][W - 1]);
	}
	return 0;
} 
