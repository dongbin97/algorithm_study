#include <stdio.h>
#include <queue>
using namespace std;
int dx[] = { -1,1,0,0 }, dy[] = { 0,0,-1,1 };

int R, C, dist[50][50] = { 0, };
int target_row, target_col;
char map[50][51];
bool w_visited[50][50] = { false, }, d_visited[50][50] = { false, };
queue<pair<int, int> > water_q, dochi_q;

int main() {
	scanf("%d %d", &R, &C);
	for (int i = 0; i < R; i++) {
		scanf("%s", map[i]);
		for (int j = 0; j < C; j++) {
			if (map[i][j] == 'S') {
				d_visited[i][j] = true;
				dochi_q.push({ i,j });
			}
			else if (map[i][j] == 'D') {
				target_row = i; target_col = j;
			}
			else if (map[i][j] == '*') {
				w_visited[i][j] = true;
				water_q.push({ i,j });
			}
		}
	}

	
	bool found = false;
	while (!dochi_q.empty() && !found) {
		int water_sz = water_q.size();
		for (int x = 0; x < water_sz; x++) {
			int row = water_q.front().first;
			int col = water_q.front().second; water_q.pop();
			for (int i = 0; i < 4; i++) {
				int nrow = row + dx[i];
				int ncol = col + dy[i];
				if (!(0 <= nrow && nrow < R && 0 <= ncol && ncol < C)) continue;
				if (map[nrow][ncol] == 'X' || map[nrow][ncol] == 'D') continue;
				if (w_visited[nrow][ncol]) continue;
				map[nrow][ncol] = '*';
				w_visited[nrow][ncol] = true;
				water_q.push({ nrow,ncol });
			}
		}

		int dochi_sz = dochi_q.size();
		for (int x = 0; x < dochi_sz && !found; x++) {
			int row = dochi_q.front().first;
			int col = dochi_q.front().second; dochi_q.pop();
			for (int i = 0; i < 4; i++) {
				int nrow = row + dx[i];
				int ncol = col + dy[i];
				if (!(0 <= nrow && nrow < R && 0 <= ncol && ncol < C)) continue;
				if (map[nrow][ncol] == 'X' || map[nrow][ncol] == '*') continue;
				if (d_visited[nrow][ncol]) continue;
				dist[nrow][ncol] = dist[row][col] + 1;
				d_visited[nrow][ncol] = true;
				if (map[nrow][ncol] == 'D') {
					found = true;
					break;
				}
				dochi_q.push({ nrow,ncol });
			}
		}
	}

	if (!found) printf("KAKTUS");
	else printf("%d", dist[target_row][target_col]);
	return 0;
}
