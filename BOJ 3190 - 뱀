#include <stdio.h>
#include <queue>
using namespace std;

typedef struct {
	int row, col;
}coor;

typedef struct {
	int time;
	char dir;
}st;

int N, K, L, map[101][101];
int dx[] = { 0,1,0,-1 }, dy[] = { 1,0,-1,0 };
coor snake[101];
queue<st> q;

int main() {
	int x, y;
	char d;

	scanf("%d", &N);
	scanf("%d", &K);
	for (int i = 0; i < K; i++) {
		scanf("%d %d", &x, &y);
		map[x][y] = -1;
	}

	scanf("%d", &L);
	for (int i = 0; i < L; i++) {
		scanf("%d %c", &x, &d);
		q.push({ x,d });
	}

	int dir = 0, len = 1;
	map[1][1] = 1;
	snake[0] = { 1,1 };

	int time = 0;
	while(1) {
		
		int nrow = snake[0].row + dx[dir], ncol = snake[0].col + dy[dir];
		if (nrow < 1 || nrow > N || ncol < 1 || ncol > N) break;
		if (map[nrow][ncol] == 1) break;
		
		if (map[nrow][ncol] == -1) { //사과가 있음
			for (int i = len - 1; i >= 0; i--)
				snake[i + 1] = snake[i];
			snake[0] = { nrow,ncol };
			len++;
		}
		else {//사과가 없음
			map[snake[len - 1].row][snake[len - 1].col] = 0;
			for (int i = len - 2; i >= 0; i--)
				snake[i + 1] = snake[i];
			snake[0] = { nrow,ncol };
		}
		map[nrow][ncol] = 1;

		time++;
		if (!q.empty() && time == q.front().time) {
			if (q.front().dir == 'D') dir = (dir + 1) % 4;
			else dir = (dir + 3) % 4;
			q.pop();
		}
	}

	printf("%d", time + 1);
}
