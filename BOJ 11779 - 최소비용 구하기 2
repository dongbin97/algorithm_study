#include <stdio.h>
#include <queue>
#include <algorithm>
using namespace std;
#define INF 100000001

typedef struct {
	int to, cost;
}st;

struct comp {
	bool operator()(st a, st b) {
		return a.cost > b.cost;
	}
};

int n, m, dist[1001], parent[1001];
vector<st> graph[1001];
vector<int> path;
priority_queue<st, vector<st>, comp> pq;

int main() {
	int a, b, c;
	scanf("%d", &n);
	scanf("%d", &m);
	for (int i = 0; i < m; i++) {
		scanf("%d %d %d", &a, &b, &c);
		graph[a].push_back({ b,c });
	}
	scanf("%d %d", &a, &b);

	for (int i = 1; i <= n; i++) dist[i] = INF;

	dist[a] = 0;
	parent[a] = -1;
	pq.push({ a,dist[a] });

	while (!pq.empty()) {
		st e = pq.top(); pq.pop();
		if (e.to == b) break;

		for (st x : graph[e.to]) {
			if (dist[x.to] > x.cost + e.cost) {
				dist[x.to] = x.cost + e.cost;
				parent[x.to] = e.to;
				pq.push({ x.to,dist[x.to] });
			}
		}
	}
	
	int point = b, cnt = 0;
	while (point > 0) {
		path.push_back(point);
		cnt++;
		point = parent[point];
	}

	printf("%d\n", dist[b]);
	printf("%d\n", cnt);
	for (int i = cnt - 1; i >= 0; i--) 
		printf("%d ", path[i]);
}
