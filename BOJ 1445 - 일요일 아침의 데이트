#include <stdio.h>
#include <queue>
using namespace std;
#define INF 10000000

typedef struct {
	int row, col;
}coor;

typedef struct {
	int to_row, to_col, gar, adj;
}st;

struct comp {
	bool operator()(st a, st b) {
		if (a.gar == b.gar)
			return a.adj > b.adj;
		else return a.gar > b.gar;
	}
};

int N, M;
pair<int,int> dist[50][50];
int dx[] = { -1,1,0,0 }, dy[] = { 0,0,-1,1 };
char map[50][51];
vector<coor> garbage;
vector<st> graph[50][50];
priority_queue<st, vector<st>, comp> pq;

int main() {
	int srow, scol, frow, fcol;
	scanf("%d %d", &N, &M);
	for (int i = 0; i < N; i++)
		scanf("%s", map[i]);

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (map[i][j] == 'S')
				srow = i, scol = j;
			else if (map[i][j] == 'F')
				frow = i, fcol = j;
			else if (map[i][j] == 'g')
				garbage.push_back({ i,j });
		}
	}

	for (coor x : garbage) {
		for (int i = 0; i < 4; i++) {
			int nrow = x.row + dx[i], ncol = x.col + dy[i];
			if (nrow < 0 || nrow >= N || ncol < 0 || ncol >= M) continue;
			if (map[nrow][ncol] == '.')
				map[nrow][ncol] = 'a';
		}
	}

	for (int row = 0; row < N; row++) {
		for (int col = 0; col < M; col++) {
			for (int i = 0; i < 4; i++) {
				int nrow = row + dx[i], ncol = col + dy[i];
				if (nrow < 0 || nrow >= N || ncol < 0 || ncol >= M) continue;
				if (map[nrow][ncol] == 'g')
					graph[row][col].push_back({ nrow,ncol,1,0 });
				else if (map[nrow][ncol] == 'a')
					graph[row][col].push_back({ nrow,ncol,0,1 });
				else 
					graph[row][col].push_back({ nrow,ncol,0,0 });

			}
		}
	}

	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			dist[i][j] = { INF, INF };

	if (map[srow][scol] == 'a') dist[srow][scol] = { 0,1 };
	else dist[srow][scol] = { 0,0 };
	pq.push({ srow,scol,dist[srow][scol].first,dist[srow][scol].second });

	while (!pq.empty()) {
		st e = pq.top(); pq.pop();

		for (st x : graph[e.to_row][e.to_col]) {
			
			if ((dist[x.to_row][x.to_col].first == x.gar + e.gar && dist[x.to_row][x.to_col].second > x.adj + e.adj) ||
				dist[x.to_row][x.to_col].first > x.gar + e.gar) {
				dist[x.to_row][x.to_col] = { x.gar + e.gar,x.adj + e.adj };
				pq.push({ x.to_row,x.to_col,dist[x.to_row][x.to_col].first, dist[x.to_row][x.to_col].second });
			}
		}
	}

	printf("%d %d", dist[frow][fcol].first, dist[frow][fcol].second);
}
