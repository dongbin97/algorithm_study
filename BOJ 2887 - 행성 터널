#include <stdio.h>
#include <queue>
#include <algorithm>
using namespace std;

typedef struct {
	int point, index;
}coor;

typedef struct {
	int from, to, cost;
}edge;

bool coor_comp(coor a, coor b) {
	return a.point > b.point;
}

struct comp {
	bool operator()(edge a, edge b) {
		return a.cost > b.cost;
	}
};

int N, p[100000];
priority_queue<edge, vector<edge>, comp> pq;
vector<coor> X, Y, Z;

int find(int u) {
	int root, x, temp;
	for (root = u; p[root] >= 0; root = p[root]);
	for (x = u; x != root; x = temp) {
		temp = p[x];
		p[x] = root;
	}
	return root;
}

void merge(int u, int v) {
	int temp = p[u] + p[v];
	if (p[u] < p[v]) {
		p[v] = u;
		p[u] = temp;
	}
	else {
		p[u] = v;
		p[v] = temp;
	}
}

int main() {
	int x, y, z;
	scanf("%d", &N);
	for (int i = 0; i < N; i++) p[i] = -1;

	for (int i = 0; i < N; i++) {
		scanf("%d %d %d", &x, &y, &z);
		X.push_back({ x,i });
		Y.push_back({ y,i });
		Z.push_back({ z,i });
	}

	sort(X.begin(), X.end(), coor_comp);
	sort(Y.begin(), Y.end(), coor_comp);
	sort(Z.begin(), Z.end(), coor_comp);

	for (int i = 0; i < N - 1; i++) {
		pq.push({ X[i].index, X[i + 1].index, abs(X[i].point - X[i + 1].point) });
		pq.push({ Y[i].index, Y[i + 1].index, abs(Y[i].point - Y[i + 1].point) });
		pq.push({ Z[i].index, Z[i + 1].index, abs(Z[i].point - Z[i + 1].point) });
	}

	int cnt = 0, cost = 0;
	while (cnt < N - 1) {
		edge e = pq.top(); pq.pop();
		int u = find(e.from), v = find(e.to);
		if (u == v) continue;
		merge(u, v);
		cnt++;
		cost += e.cost;
	}

	printf("%d", cost);
}
