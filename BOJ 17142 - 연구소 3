#include <stdio.h>
#include <vector>
#include <queue>
using namespace std;

typedef struct {
	int r, c;
}coor;

int N, M, map[50][50], ans = 3000;
int dx[] = { -1,1,0,0 }, dy[] = { 0,0,-1,1 };
vector<coor> v;

int count(int num) {
	int res = 0;

	while (num) {
		if (num % 2 == 1) res++;
		num /= 2;
	}

	return res;
}

void bfs(int num, int v_num, int cnt) {
	queue<coor> q;
	int dp[50][50] = { 0, };

	for (int i = 0; i < v_num; i++) {
		if (num & (1 << i)) {
			dp[v[i].r][v[i].c] = 1;
			q.push(v[i]);
		}
	}

	int m = 1, c = 0;
	while (c < cnt && !q.empty()) {
		coor x = q.front(); q.pop();

		for (int i = 0; i < 4; i++) {
			int nr = x.r + dx[i], nc = x.c + dy[i];
			if (nr < 0 || nr >= N || nc < 0 || nc >= N) continue;
			if (dp[nr][nc] > 0 || map[nr][nc] == 1) continue;

			if (map[nr][nc] == 0) c++;

			dp[nr][nc] = dp[x.r][x.c] + 1;
			if (m < dp[nr][nc]) m = dp[nr][nc];
			q.push({ nr,nc });
		}
	}

	if (c == cnt && ans > m - 1)
		ans = m - 1;
}

int main() {
	int cnt = 0;
	scanf("%d %d", &N, &M);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			scanf("%d", &map[i][j]);
			if (map[i][j] == 0) cnt++;
			else if (map[i][j] == 2)
				v.push_back({ i,j });
		}
	}

	int v_num = v.size();

	for (int i = 0; i < (1 << v_num); i++) {
		if (count(i) == M) {
			bfs(i, v_num, cnt);
		}
	}

	if (ans == 3000) ans = -1;
	printf("%d", ans);

}
