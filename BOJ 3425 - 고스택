#include <stdio.h>
#include <vector>
#include <stack>
#include <algorithm>
#define MAX 1000000000
using namespace std;
vector<int> command;
stack<long long> s;
char* input;
long long number;

int com(char* in) {
	if (in[0] == 'N') {
		scanf("%lld", &number);
		return 1;
	}
	else if (in[0] == 'P') return 2;
	else if (in[0] == 'I') return 3;
	else if (in[0] == 'D' && in[1] == 'U') return 4;
	else if (in[0] == 'S' && in[1] == 'W') return 5;
	else if (in[0] == 'A') return 6;
	else if (in[0] == 'S' && in[1] == 'U') return 7;
	else if (in[0] == 'M' && in[1] == 'U') return 8;
	else if (in[0] == 'D' && in[1] == 'I') return 9;
	else if (in[0] == 'M' && in[1] == 'O') return 10;
	else if (in[0] == 'E') return 11;
	else if (in[0] == 'Q') return 12;
}

bool play(int num,int idx) {
	long long insert, a, b;
	switch (num) {
	case 1:
		insert = command[idx];
		s.push(insert);
		break;
	case 2:
		if (s.empty()) return false;
		s.pop();
		break;
	case 3:
		if (s.empty()) return false;
		insert = (-1) * s.top();
		s.pop();
		s.push(insert);
		break;
	case 4:
		if (s.empty()) return false;
		insert = s.top();
		s.push(insert);
		break;
	case 5:
		if (s.empty()) return false;
		a = s.top(); s.pop();
		if (s.empty()) return false;
		b = s.top(); s.pop();
		s.push(a); s.push(b);
		break;
	case 6:
		if (s.empty()) return false;
		a = s.top(); s.pop();
		if (s.empty()) return false;
		b = s.top(); s.pop();
		insert = a + b;
		if (insert<(-1) * MAX || insert>MAX) return false;
		s.push(insert);
		break;
	case 7:
		if (s.empty()) return false;
		a = s.top(); s.pop();
		if (s.empty()) return false;
		b = s.top(); s.pop();
		insert = b - a;
		if (insert<(-1) * MAX || insert>MAX) return false;
		s.push(insert);
		break;
	case 8:
		if (s.empty()) return false;
		a = s.top(); s.pop();
		if (s.empty()) return false;
		b = s.top(); s.pop();
		insert = a * b;
		if (insert<(-1) * MAX || insert>MAX) return false;
		s.push(insert);
		break;
	case 9:
		if (s.empty()) return false;
		a = s.top(); s.pop();
		if (s.empty()) return false;
		b = s.top(); s.pop();
		if (a == 0) return false;
		insert = abs(b) / abs(a);
		if (a * b < 0) insert = (-1) * insert;
		if (insert<(-1) * MAX || insert>MAX) return false;
		s.push(insert);
		break;
	case 10:
		if (s.empty()) return false;
		a = s.top(); s.pop();
		if (s.empty()) return false;
		b = s.top(); s.pop();
		if (a == 0) return false;
		insert = abs(b) % abs(a);
		if (b < 0) insert = (-1) * insert;
		if (insert<(-1) * MAX || insert>MAX) return false;
		s.push(insert);
		break;
	case 11:
		if (s.size() != 1) return false;
	}
	return true;
}
int main(){
	input = (char*)malloc(sizeof(char) * 16);
	int c, test, V;

	while (1) {
		scanf("%s", input);
		c = com(input); 
		if (c == 12) break;
		command.push_back(c);
		if (c == 1) command.push_back(number);
		else if (c == 11) {
			scanf("%d", &test);
			while (test--) {
				scanf("%d", &V);
				s.push(V);
				int size = command.size();
				bool error = false;
				for (int i = 0; i < size; i++) {
					if (!(error=play(command[i],i+1))) {
						printf("ERROR\n");
						break;
					}
					if (command[i] == 1) i++;
				}
				if (error)
					printf("%d\n", s.top());
				while (!s.empty())
					s.pop();
			}
			command.clear();
			printf("\n");
		}
	}
		
	return 0;
}
