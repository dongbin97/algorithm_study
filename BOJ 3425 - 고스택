#include <stdio.h>
#include <stack>
#include <vector>
#include <cmath>
using namespace std;
#define MAX 1000000000

char com[5];
vector<int> commands;
int insert;
stack<int> st;

int getnum(char com[]) {
	if (com[0] == 'N') {
		scanf("%d", &insert);
		return 1;
	}
	else if (com[0] == 'P') return 2;
	else if (com[0] == 'I') return 3;
	else if (com[0] == 'D' && com[1] == 'U') return 4;
	else if (com[0] == 'S' && com[1] == 'W') return 5;
	else if (com[0] == 'A') return 6;
	else if (com[0] == 'S' && com[1] == 'U') return 7;
	else if (com[0] == 'M' && com[1] == 'U') return 8;
	else if (com[0] == 'D' && com[1] == 'I') return 9;
	else if (com[0] == 'M' && com[1] == 'O') return 10;
	else if (com[0] == 'E') return 11;
	else if (com[0] == 'Q') return 12;
}

bool play(int num) {
	long long a, b, res;
	if (num == 1)  st.push(insert);
	else if (num == 2) {
		if (st.empty()) return false;
		st.pop();
	}
	else if (num == 3) {
		if (st.empty()) return false;
		a = st.top(); st.pop();
		st.push((-1) * a);
	}
	else if (num == 4) {
		if (st.empty()) return false;
		st.push(st.top());
	}
	else if (num == 5) {
		if (st.empty()) return false;
		a = st.top(); st.pop();
		if (st.empty()) return false;
		b = st.top(); st.pop();
		st.push(a);
		st.push(b);
	}
	else if (num == 6) {
		if (st.empty()) return false;
		a = st.top(); st.pop();
		if (st.empty()) return false;
		b = st.top(); st.pop();
		res = a + b;
		if (res > MAX || res < (-1) * MAX) return false;
		st.push(res);
	}
	else if (num == 7) {
		if (st.empty()) return false;
		a = st.top(); st.pop();
		if (st.empty()) return false;
		b = st.top(); st.pop();
		res = b - a;
		if (res > MAX || res < (-1) * MAX) return false;
		st.push(res);
	}
	else if (num == 8) {
		if (st.empty()) return false;
		a = st.top(); st.pop();
		if (st.empty()) return false;
		b = st.top(); st.pop();
		res = a * b;
		if (res > MAX || res < (-1) * MAX) return false;
		st.push(res);
	}
	else if (num == 9) {
		if (st.empty()) return false;
		a = st.top(); st.pop();
		if (st.empty()) return false;
		b = st.top(); st.pop();
		if (a == 0) return false;
		res = abs(b) / abs(a);
		if (a * b < 0) res = (-1) * res;
		if (res > MAX || res < (-1) * MAX) return false;
		st.push(res);
	}
	else if (num == 10) {
		if (st.empty()) return false;
		a = st.top(); st.pop();
		if (st.empty()) return false;
		b = st.top(); st.pop();
		if (a == 0) return false;
		res = abs(b) % abs(a);
		if (b < 0) res = (-1) * res;
		if (res > MAX || res < (-1) * MAX) return false;
		st.push(res);
	}
	else if (num == 11) {
		if (st.size() != 1) return false;
	}
	return true;
}

int main() {
	int test;
	bool quit = false;
	while (1) {
		while (1) {
			scanf("%s", com);
			int num = getnum(com);
			if (num == 12) {
				quit = true;
				break;
			}
			commands.push_back(num);
			if (num == 1) commands.push_back(insert);
			else if (num == 11) break;
		}

		if (quit) break;

		scanf("%d", &test);
		while (test--) {
			int start;
			bool error = false;
			scanf("%d", &start);
			st.push(start);

			int size = commands.size();
			for (int i = 0; i < size; i++) {
				int num = commands[i];
				if (num == 1)  insert = commands[++i];
				if (!play(num)) {
					error = true;
					break;
				}
			}
			if (!error) printf("%d\n", st.top());
			else printf("ERROR\n");
			while (!st.empty()) st.pop();
		}
		commands.clear();
		printf("\n");
	}
	return 0;
}
