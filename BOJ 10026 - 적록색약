#include <stdio.h>

int N;
int dx[] = { -1,1,0,0 }, dy[] = { 0,0,-1,1 };
char map[100][101];
bool v[100][100];

void dfs(int r, int c, char color, bool flag) {
	v[r][c] = true;

	for (int i = 0; i < 4; i++) {
		int nr = r + dx[i], nc = c + dy[i];
		if (nr < 0 || nr >= N || nc < 0 || nc >= N) continue;
		if (v[nr][nc]) continue;

		if (map[nr][nc] == color || (flag && color == 'R' && map[nr][nc] == 'G') || (flag && color == 'G' && map[nr][nc] == 'R'))
			dfs(nr, nc, color, flag);
	}
}

int main() {
	scanf("%d", &N);
	for (int i = 0; i < N; i++)
		scanf("%s", map[i]);

	int color = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (!v[i][j]) {
				dfs(i, j, map[i][j], false);
				color++;
			}
		}
	}

	printf("%d ", color);
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			v[i][j] = false;

	color = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (!v[i][j]) {
				dfs(i, j, map[i][j], true);
				color++;
			}
		}
	}

	printf("%d", color);
}
