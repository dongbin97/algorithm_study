#include <stdio.h>
#include <string.h>
#include <stack>
#include <vector>
#include <algorithm>
using namespace std;

char str[31];
stack<int> st;
vector<pair<int, int> > arr;

int solve(int start, int end) {
	int idx = arr[start].first;
	
	if (start == end) {
		if (str[idx] == '(') return 2;
		else if (str[idx] == '[') return 3;
	}

	int s = start + 1, e = start + 2, ans = 0;
	for (; e <= end; e++) {
		if (arr[e].first < arr[s].second) continue;
		ans += solve(s, e - 1);
		s = e;
	}
	ans += solve(s, e - 1);

	if (str[idx] == '(') return 2 * ans;
	else if (str[idx] == '[')return 3 * ans;
}

int main() {

	scanf("%s", &str);
	int len = strlen(str);
	bool flag = true;
	for (int i = 0; i < len; i++) {
		if (str[i] == '(' || str[i] == '[') st.push(i);
		else if (str[i] == ')') {
			if (st.empty() || str[st.top()] != '(') {
				flag = false;
				break;
			}
			else {
				arr.push_back({st.top(), i});
				st.pop();
			}
		}
		else if (str[i] == ']') {
			if (st.empty() || str[st.top()] != '[') {
				flag = false;
				break;
			}
			else {
				arr.push_back({ st.top(), i });
				st.pop();
			}
		}
	}

	if (!st.empty()) flag = false;

	if (!flag) {
		printf("0");
		return 0;
	}

	sort(arr.begin(), arr.end());

	int sz = arr.size(), start = 0, end = 1, ans = 0;
	for (; end < sz; end++) {
		if (arr[end].first < arr[start].second) continue;
		ans += solve(start, end - 1);
		start = end;
	}
	ans += solve(start, end - 1);

	printf("%d", ans);
	return 0;
}
